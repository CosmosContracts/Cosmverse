{"ast":null,"code":"export const Market = contractAddress => {\n  const use = client => {\n    const numOffers = async () => {\n      const result = await client.queryContractSmart(contractAddress, {\n        get_count: {}\n      });\n      return result.count;\n    };\n\n    const offer = async (contract, tokenId) => {\n      const result = await client.queryContractSmart(contractAddress, {\n        get_offer: {\n          contract,\n          token_id: tokenId\n        }\n      });\n      return result.offers.length > 0 ? result.offers[0] : undefined;\n    };\n\n    const offersBySeller = async (seller, startAfter, limit) => {\n      const result = await client.queryContractSmart(contractAddress, {\n        get_offers: {\n          seller,\n          start_after: startAfter,\n          limit: limit\n        }\n      });\n      return result;\n    };\n\n    const allOffers = async (startAfter, limit) => {\n      const result = await client.queryContractSmart(contractAddress, {\n        all_offers: {\n          start_after: startAfter,\n          limit: limit\n        }\n      });\n      return result;\n    };\n\n    return {\n      contractAddress,\n      numOffers,\n      offer,\n      offersBySeller,\n      allOffers\n    };\n  };\n\n  const useTx = client => {\n    const buy = async (sender, offerId, price) => {\n      const result = await client.execute(sender, contractAddress, {\n        buy: {\n          offering_id: offerId\n        }\n      }, undefined, [price]);\n      return result.transactionHash;\n    };\n\n    const withdraw = async (sender, offerId) => {\n      const result = await client.execute(sender, contractAddress, {\n        withdraw_nft: {\n          offering_id: offerId\n        }\n      });\n      return result.transactionHash;\n    };\n\n    return {\n      contractAddress,\n      buy,\n      withdraw\n    };\n  };\n\n  return {\n    use,\n    useTx\n  };\n};\n_c = Market;\n\nvar _c;\n\n$RefreshReg$(_c, \"Market\");","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/services/client/market.ts"],"names":["Market","contractAddress","use","client","numOffers","result","queryContractSmart","get_count","count","offer","contract","tokenId","get_offer","token_id","offers","length","undefined","offersBySeller","seller","startAfter","limit","get_offers","start_after","allOffers","all_offers","useTx","buy","sender","offerId","price","execute","offering_id","transactionHash","withdraw","withdraw_nft"],"mappings":"AAqCA,OAAO,MAAMA,MAAM,GAAIC,eAAD,IAA6C;AACjE,QAAMC,GAAG,GAAIC,MAAD,IAA4C;AAEtD,UAAMC,SAAS,GAAG,YAA6B;AAC7C,YAAMC,MAAM,GAAG,MAAMF,MAAM,CAACG,kBAAP,CAA0BL,eAA1B,EAA2C;AAAEM,QAAAA,SAAS,EAAE;AAAb,OAA3C,CAArB;AACA,aAAOF,MAAM,CAACG,KAAd;AACD,KAHD;;AAKA,UAAMC,KAAK,GAAG,OAAOC,QAAP,EAAyBC,OAAzB,KAA+E;AAC3F,YAAMN,MAAsB,GAAG,MAAMF,MAAM,CAACG,kBAAP,CAA0BL,eAA1B,EAA2C;AAAEW,QAAAA,SAAS,EAAE;AAAEF,UAAAA,QAAF;AAAYG,UAAAA,QAAQ,EAAEF;AAAtB;AAAb,OAA3C,CAArC;AACA,aAAON,MAAM,CAACS,MAAP,CAAcC,MAAd,GAAuB,CAAvB,GAA2BV,MAAM,CAACS,MAAP,CAAc,CAAd,CAA3B,GAA6CE,SAApD;AACD,KAHD;;AAKA,UAAMC,cAAc,GAAG,OAAOC,MAAP,EAAuBC,UAAvB,EAA4CC,KAA5C,KAAwF;AAC7G,YAAMf,MAAM,GAAG,MAAMF,MAAM,CAACG,kBAAP,CAA0BL,eAA1B,EAA2C;AAAEoB,QAAAA,UAAU,EAAE;AAAEH,UAAAA,MAAF;AAAUI,UAAAA,WAAW,EAAEH,UAAvB;AAAmCC,UAAAA,KAAK,EAAEA;AAA1C;AAAd,OAA3C,CAArB;AACA,aAAOf,MAAP;AACD,KAHD;;AAKA,UAAMkB,SAAS,GAAG,OAAOJ,UAAP,EAA4BC,KAA5B,KAAwE;AACxF,YAAMf,MAAM,GAAG,MAAMF,MAAM,CAACG,kBAAP,CAA0BL,eAA1B,EAA2C;AAAEuB,QAAAA,UAAU,EAAE;AAAEF,UAAAA,WAAW,EAAEH,UAAf;AAA2BC,UAAAA,KAAK,EAAEA;AAAlC;AAAd,OAA3C,CAArB;AACA,aAAOf,MAAP;AACD,KAHD;;AAKA,WAAO;AACLJ,MAAAA,eADK;AAELG,MAAAA,SAFK;AAGLK,MAAAA,KAHK;AAILQ,MAAAA,cAJK;AAKLM,MAAAA;AALK,KAAP;AAOD,GA7BD;;AA+BA,QAAME,KAAK,GAAItB,MAAD,IAAqD;AACjE,UAAMuB,GAAG,GAAG,OAAOC,MAAP,EAAuBC,OAAvB,EAAwCC,KAAxC,KAAyE;AACnF,YAAMxB,MAAM,GAAG,MAAMF,MAAM,CAAC2B,OAAP,CAAeH,MAAf,EAAuB1B,eAAvB,EAAwC;AAAEyB,QAAAA,GAAG,EAAE;AAAEK,UAAAA,WAAW,EAAEH;AAAf;AAAP,OAAxC,EAA2EZ,SAA3E,EAAsF,CAACa,KAAD,CAAtF,CAArB;AACA,aAAOxB,MAAM,CAAC2B,eAAd;AACD,KAHD;;AAKA,UAAMC,QAAQ,GAAG,OAAON,MAAP,EAAuBC,OAAvB,KAA4D;AAC3E,YAAMvB,MAAM,GAAG,MAAMF,MAAM,CAAC2B,OAAP,CAAeH,MAAf,EAAuB1B,eAAvB,EAAwC;AAAEiC,QAAAA,YAAY,EAAE;AAAEH,UAAAA,WAAW,EAAEH;AAAf;AAAhB,OAAxC,CAArB;AACA,aAAOvB,MAAM,CAAC2B,eAAd;AACD,KAHD;;AAKA,WAAO;AACL/B,MAAAA,eADK;AAELyB,MAAAA,GAFK;AAGLO,MAAAA;AAHK,KAAP;AAKD,GAhBD;;AAkBA,SAAO;AAAE/B,IAAAA,GAAF;AAAOuB,IAAAA;AAAP,GAAP;AACD,CAnDM;KAAMzB,M","sourcesContent":["import { CosmWasmClient, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin } from \"@cosmjs/stargate\";\n\nexport interface OfferResponse {\n  contract: string\n  id: string\n  list_price: Coin\n  seller: string,\n  token_id: string\n}\n\nexport interface OffersResponse {\n  offers: OfferResponse[]\n}\n\nexport interface MarketInstance {\n  readonly contractAddress: string;\n\n  numOffers: () => Promise<number>;\n  offer: (contract: string, tokenId: string) => Promise<OfferResponse|undefined>;\n  offersBySeller: (seller: string, startAfter?: string, limit?: number) => Promise<OffersResponse>;\n  allOffers: (startAfter?: string, limit?: number) => Promise<OffersResponse>;\n}\n\nexport interface MarketTxInstance {\n  readonly contractAddress: string;\n\n  // actions\n  buy: (sender: string, offerId: string, price: Coin) => Promise<string>;\n  withdraw: (sender: string, offerId: string) => Promise<string>;\n}\n\nexport interface MarketContract {\n  use: (client: CosmWasmClient) => MarketInstance;\n  useTx: (client: SigningCosmWasmClient) => MarketTxInstance;\n}\n\nexport const Market = (contractAddress: string): MarketContract => {\n  const use = (client: CosmWasmClient): MarketInstance => {\n\n    const numOffers = async (): Promise<number> => {\n      const result = await client.queryContractSmart(contractAddress, { get_count: {} });\n      return result.count;\n    };\n\n    const offer = async (contract: string, tokenId: string): Promise<OfferResponse|undefined> => {\n      const result: OffersResponse = await client.queryContractSmart(contractAddress, { get_offer: { contract, token_id: tokenId } });\n      return result.offers.length > 0 ? result.offers[0]: undefined;\n    };\n\n    const offersBySeller = async (seller: string, startAfter?: string, limit?: number): Promise<OffersResponse> => {\n      const result = await client.queryContractSmart(contractAddress, { get_offers: { seller, start_after: startAfter, limit: limit } });\n      return result;\n    };\n\n    const allOffers = async (startAfter?: string, limit?: number): Promise<OffersResponse> => {\n      const result = await client.queryContractSmart(contractAddress, { all_offers: { start_after: startAfter, limit: limit } });\n      return result;\n    };\n\n    return {\n      contractAddress,\n      numOffers,\n      offer,\n      offersBySeller,\n      allOffers,\n    }\n  };\n\n  const useTx = (client: SigningCosmWasmClient): MarketTxInstance => {\n    const buy = async (sender: string, offerId: string, price: Coin): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { buy: { offering_id: offerId } }, undefined, [price]);\n      return result.transactionHash;\n    };\n\n    const withdraw = async (sender: string, offerId: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { withdraw_nft: { offering_id: offerId } });\n      return result.transactionHash;\n    };\n\n    return {\n      contractAddress,\n      buy,\n      withdraw,\n    };\n  };\n\n  return { use, useTx };\n}\n"]},"metadata":{},"sourceType":"module"}