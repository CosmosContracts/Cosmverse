{"ast":null,"code":"var _jsxFileName = \"/Users/pauloponciano/Documents/cosmverse/src/App/pages/detail/index.tsx\",\n    _s2 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Link as ReactRouterLink, useHistory, useParams } from \"react-router-dom\";\nimport { Avatar, Box, Button, Center, chakra, Flex, HStack, Image, Link, Spinner, VStack, useColorModeValue, useToast, GridItem, Grid } from \"@chakra-ui/react\";\nimport { CW721, formatAddress, formatPrice, Market, publicIpfsUrl, useSdk } from \"../../services\";\nimport { config } from \"../../../config\";\nimport userLogo from \"../../assets/user-default.svg\";\nimport cosmverseLogo from \"../../assets/cosmverse.jpg\";\nimport { TransactionLink } from \"../../components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Detail = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const toast = useToast();\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const {\n    client,\n    address,\n    getSignClient,\n    refreshBalance\n  } = useSdk();\n  const [nft, setNft] = useState();\n  const [owner, setOwner] = useState();\n  const [offer, setOffer] = useState();\n  useEffect(() => {\n    (async () => {\n      if (!client) return;\n      const contract = CW721(config.contract).use(client);\n      const marketContract = Market(config.marketContract).use(client);\n      const result = await contract.nftInfo(id);\n      result.image = publicIpfsUrl(result.image);\n      const offer = await marketContract.offer(config.contract, id);\n      setOffer(offer);\n      setOwner(offer ? offer.seller : await contract.ownerOf(id));\n      setNft(result);\n    })();\n  }, [client, id]);\n\n  const handleBuy = async () => {\n    _s();\n\n    const signClient = getSignClient();\n\n    if (!signClient) {\n      toast({\n        title: \"Account required.\",\n        description: \"Please connect wallet.\",\n        status: \"warning\",\n        position: \"top\",\n        isClosable: true\n      });\n      return;\n    }\n\n    if (!offer) return;\n    const contract = Market(config.marketContract).useTx(signClient);\n\n    try {\n      const txHash = await contract.buy(address, offer.id, offer.list_price);\n      toast({\n        title: `Successful Transaction`,\n        description: /*#__PURE__*/_jsxDEV(TransactionLink, {\n          tx: txHash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this),\n        status: \"success\",\n        position: \"bottom-right\",\n        isClosable: true\n      });\n      await refreshBalance();\n      history.push(`/account/token/${offer.token_id}`);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `${error}`,\n        status: \"error\",\n        position: \"bottom-right\",\n        isClosable: true\n      });\n    }\n  };\n\n  _s(handleBuy, \"880Og+6fzB4pzVzRY1a/BkMlQU0=\", true);\n\n  const loadingSkeleton = /*#__PURE__*/_jsxDEV(Center, {\n    children: /*#__PURE__*/_jsxDEV(Spinner, {\n      size: \"xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 7\n  }, this);\n\n  const borderColor = useColorModeValue('cyan.900', 'white.200');\n  return /*#__PURE__*/_jsxDEV(Box, {\n    m: 5,\n    children: !nft ? loadingSkeleton : /*#__PURE__*/_jsxDEV(Grid, {\n      minH: \"80vh\",\n      gridTemplateColumns: {\n        sm: \"repeat(1, minmax(0px, 1fr))\",\n        md: \"repeat(8, minmax(0px, 1fr))\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 5,\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          h: \"full\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            bgGradient: \"linear(to-r, cyan.200, white.200)\",\n            roundedTop: \"md\",\n            boxSize: \"420px\",\n            fit: \"cover\",\n            fallbackSrc: cosmverseLogo,\n            src: nft.image,\n            alt: nft.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 3,\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: 6,\n            align: \"stretch\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              py: 2,\n              children: [/*#__PURE__*/_jsxDEV(chakra.h1, {\n                fontWeight: \"bold\",\n                fontSize: \"3xl\",\n                children: nft.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(chakra.p, {\n                mt: 1,\n                fontSize: \"xs\",\n                color: \"gray.500\",\n                children: \"@unknown\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(chakra.p, {\n                mt: 1,\n                maxW: \"400px\",\n                fontSize: \"md\",\n                children: nft.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(VStack, {\n                spacing: 2,\n                align: \"stretch\",\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(chakra.p, {\n                    fontFamily: \"mono\",\n                    fontSize: \"md\",\n                    color: \"gray.500\",\n                    children: \"Owner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(HStack, {\n                    children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                      size: \"sm\",\n                      name: \"Juno\",\n                      src: userLogo\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 174,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Link, {\n                      fontSize: \"md\",\n                      fontWeight: \"semibold\",\n                      _hover: {\n                        color: \"cyan.900\"\n                      },\n                      as: ReactRouterLink,\n                      to: `/account/${owner}`,\n                      children: formatAddress(owner)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 175,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(VStack, {\n                spacing: 2,\n                align: \"stretch\",\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(chakra.p, {\n                    fontFamily: \"mono\",\n                    fontSize: \"md\",\n                    color: \"gray.500\",\n                    children: \"Price\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(chakra.p, {\n                    fontWeight: \"semibold\",\n                    fontSize: \"md\",\n                    children: offer ? formatPrice(offer.list_price) : \"Not listed\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              py: 6,\n              borderTop: 1,\n              borderStyle: 'solid',\n              borderColor: borderColor,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                disabled: !offer,\n                onClick: handleBuy,\n                type: \"button\",\n                height: \"var(--chakra-sizes-10)\",\n                fontSize: 'md',\n                fontWeight: \"semibold\",\n                borderRadius: '50px',\n                color: 'white',\n                bg: \"pink.500\",\n                _hover: {\n                  bg: \"pink.700\"\n                },\n                children: \"Buy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 7\n  }, this);\n};\n\n_s2(Detail, \"+YmQhbie1GY0L8xa+0ICG+H/m9I=\", false, function () {\n  return [useToast, useParams, useHistory, useSdk, useColorModeValue];\n});\n\n_c = Detail;\n\nvar _c;\n\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/pages/detail/index.tsx"],"names":["React","useEffect","useState","Link","ReactRouterLink","useHistory","useParams","Avatar","Box","Button","Center","chakra","Flex","HStack","Image","Spinner","VStack","useColorModeValue","useToast","GridItem","Grid","CW721","formatAddress","formatPrice","Market","publicIpfsUrl","useSdk","config","cosmverseLogo","TransactionLink","Detail","toast","id","history","client","address","getSignClient","refreshBalance","nft","setNft","owner","setOwner","offer","setOffer","contract","use","marketContract","result","nftInfo","image","seller","ownerOf","handleBuy","signClient","title","description","status","position","isClosable","useTx","txHash","buy","list_price","push","token_id","error","loadingSkeleton","borderColor","sm","md","name","userLogo","color","bg"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Link as ReactRouterLink, useHistory, useParams } from \"react-router-dom\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Center,\n  chakra,\n  Flex,\n  HStack,\n  Image,\n  Link,\n  Spinner,\n  VStack,\n  useColorModeValue,\n  useToast,\n  GridItem,\n  Grid,\n} from \"@chakra-ui/react\";\nimport {\n  CW721,\n  formatAddress,\n  formatPrice,\n  Market,\n  NftInfoResponse,\n  OfferResponse,\n  publicIpfsUrl,\n  useSdk,\n} from \"../../services\";\nimport { config } from \"../../../config\";\nimport userLogo from \"../../assets/user-default.svg\";\nimport cosmverseLogo from \"../../assets/cosmverse.jpg\";\nimport { TransactionLink } from \"../../components\";\n\ninterface DetailParams {\n    readonly id: string;\n}\n\nexport const Detail = () => {\n    const toast = useToast();\n    const { id } = useParams<DetailParams>();\n    const history = useHistory();\n    const { client, address, getSignClient, refreshBalance } = useSdk();\n    const [nft, setNft] = useState<NftInfoResponse>();\n    const [owner, setOwner] = useState<string>();\n    const [offer, setOffer] = useState<OfferResponse>();\n\n    useEffect(() => {\n      (async () => {\n        if (!client) return;\n\n        const contract = CW721(config.contract).use(client);\n        const marketContract = Market(config.marketContract).use(client);\n\n        const result = await contract.nftInfo(id);\n        result.image = publicIpfsUrl(result.image);\n        const offer = await marketContract.offer(config.contract, id);\n\n        setOffer(offer);\n        setOwner(offer ? offer.seller : (await contract.ownerOf(id)));\n        setNft(result);\n      })();\n    }, [client, id]);\n\n    const handleBuy = async () => {\n      const signClient = getSignClient();\n      if (!signClient) {\n        toast({\n          title: \"Account required.\",\n          description: \"Please connect wallet.\",\n          status: \"warning\",\n          position: \"top\",\n          isClosable: true,\n        });\n\n        return;\n      }\n\n      if (!offer) return;\n\n      const contract = Market(config.marketContract).useTx(signClient);\n      try {\n        const txHash = await contract.buy(address, offer.id, offer.list_price);\n\n        toast({\n          title: `Successful Transaction`,\n          description: (<TransactionLink tx={txHash} />),\n          status: \"success\",\n          position: \"bottom-right\",\n          isClosable: true,\n        });\n        await refreshBalance();\n        history.push(`/account/token/${offer.token_id}`);\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: `${error}`,\n          status: \"error\",\n          position: \"bottom-right\",\n          isClosable: true,\n        });\n      }\n    };\n\n    const loadingSkeleton = (\n      <Center>\n        <Spinner size=\"xl\" />\n      </Center>\n    );\n\n    const borderColor = useColorModeValue('cyan.900', 'white.200');\n    return (\n      <Box m={5}>\n        {!nft ? loadingSkeleton : (\n          <Grid minH=\"80vh\"\n            gridTemplateColumns={{\n              sm: \"repeat(1, minmax(0px, 1fr))\",\n              md: \"repeat(8, minmax(0px, 1fr))\"\n            }}>\n            <GridItem colSpan={5}>\n              <Flex\n                h=\"full\"\n                justifyContent=\"center\"\n                alignItems=\"center\">\n                <Image\n                  bgGradient=\"linear(to-r, cyan.200, white.200)\"\n                  roundedTop=\"md\"\n                  boxSize=\"420px\"\n                  fit=\"cover\"\n                  fallbackSrc={cosmverseLogo}\n                  src={nft.image}\n                  alt={nft.name} />\n              </Flex>\n            </GridItem>\n            <GridItem colSpan={3}>\n              <Flex>\n                <VStack spacing={6} align=\"stretch\">\n                  <Box py={2}>\n                    <chakra.h1\n                      fontWeight=\"bold\"\n                      fontSize=\"3xl\"\n                    >\n                      {nft.name}\n                    </chakra.h1>\n                    <chakra.p\n                      mt={1}\n                      fontSize=\"xs\"\n                      color=\"gray.500\"\n                    >\n                      @unknown\n                    </chakra.p>\n                    <chakra.p\n                      mt={1}\n                      maxW=\"400px\"\n                      fontSize=\"md\"\n                    >\n                      {nft.description}\n                    </chakra.p>\n                  </Box>\n                  <Box>\n                    <VStack spacing={2} align=\"stretch\">\n                      <Box>\n                        <chakra.p\n                          fontFamily=\"mono\"\n                          fontSize=\"md\"\n                          color=\"gray.500\"\n                        >\n                          Owner\n                        </chakra.p>\n                      </Box>\n                      <Box>\n                        <HStack>\n                          <Avatar size=\"sm\" name=\"Juno\" src={userLogo} />\n                          <Link\n                            fontSize=\"md\"\n                            fontWeight=\"semibold\"\n                            _hover={{\n                              color: \"cyan.900\",\n                            }}\n                            as={ReactRouterLink}\n                            to={`/account/${owner}`}>{formatAddress(owner!)}</Link>\n                        </HStack>\n                      </Box>\n                    </VStack>\n                  </Box>\n                  <Box>\n                    <VStack spacing={2} align=\"stretch\">\n                      <Box>\n                        <chakra.p\n                          fontFamily=\"mono\"\n                          fontSize=\"md\"\n                          color=\"gray.500\"\n                        >\n                          Price\n                        </chakra.p>\n                      </Box>\n                      <Box>\n                        <chakra.p\n                          fontWeight=\"semibold\"\n                          fontSize=\"md\"\n                        >\n                          {offer ? formatPrice(offer.list_price) : \"Not listed\"}\n                        </chakra.p>\n                      </Box>\n                    </VStack>\n                  </Box>\n                  <Box py={6}\n                    borderTop={1}\n                    borderStyle={'solid'}\n                    borderColor={borderColor}>\n                    <Button\n                      disabled={!offer}\n                      onClick={handleBuy}\n                      type=\"button\"\n                      height=\"var(--chakra-sizes-10)\"\n                      fontSize={'md'}\n                      fontWeight=\"semibold\"\n                      borderRadius={'50px'}\n                      color={'white'}\n                      bg=\"pink.500\"\n                      _hover={{\n                        bg: \"pink.700\",\n                      }}>\n                      Buy\n                    </Button>\n                  </Box>\n                </VStack>\n              </Flex>\n            </GridItem>\n          </Grid>\n      )}\n      </Box>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}