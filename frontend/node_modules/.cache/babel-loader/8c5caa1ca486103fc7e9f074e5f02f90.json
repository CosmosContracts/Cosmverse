{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizePubkey = exports.uint64ToString = exports.uint64ToNumber = void 0;\n\nvar amino_1 = require(\"@cosmjs/amino\");\n\nvar math_1 = require(\"@cosmjs/math\");\n/**\n * Converts an integer expressed as number or string to a number.\n * Throws if input is not a valid uint64 or if the value exceeds MAX_SAFE_INTEGER.\n *\n * This is needed for supporting Comsos SDK 0.37/0.38/0.39 with one client.\n */\n\n\nfunction uint64ToNumber(input) {\n  var value = typeof input === \"number\" ? math_1.Uint64.fromNumber(input) : math_1.Uint64.fromString(input);\n  return value.toNumber();\n}\n\nexports.uint64ToNumber = uint64ToNumber;\n/**\n * Converts an integer expressed as number or string to a string.\n * Throws if input is not a valid uint64.\n *\n * This is needed for supporting Comsos SDK 0.37/0.38/0.39 with one client.\n */\n\nfunction uint64ToString(input) {\n  var value = typeof input === \"number\" ? math_1.Uint64.fromNumber(input) : math_1.Uint64.fromString(input);\n  return value.toString();\n}\n\nexports.uint64ToString = uint64ToString;\n/**\n * Normalizes a pubkey as in `BaseAccount.public_key` to allow supporting\n * Comsos SDK 0.37â€“0.39.\n *\n * Returns null when unset.\n */\n\nfunction normalizePubkey(input) {\n  if (!input) return null;\n  if (typeof input === \"string\") return amino_1.decodeBech32Pubkey(input);\n  return input;\n}\n\nexports.normalizePubkey = normalizePubkey;","map":null,"metadata":{},"sourceType":"script"}