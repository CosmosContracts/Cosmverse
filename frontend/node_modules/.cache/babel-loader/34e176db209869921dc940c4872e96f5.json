{"ast":null,"code":"var _jsxFileName = \"/Users/pauloponciano/Documents/cosmverse/src/App/services/client/wallet.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { createClient, createSimpleClient } from \"./sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction throwNotInitialized() {\n  throw new Error(\"Not yet initialized\");\n}\n\nconst defaultContext = {\n  initialized: false,\n  init: throwNotInitialized,\n  clear: throwNotInitialized,\n  config: {},\n  client: undefined,\n  changeConfig: throwNotInitialized,\n  address: \"\",\n  balance: [],\n  refreshBalance: throwNotInitialized,\n  getSigner: () => undefined,\n  changeSigner: throwNotInitialized,\n  getSignClient: () => undefined\n};\nconst CosmWasmContext = /*#__PURE__*/React.createContext(defaultContext);\nexport const useSdk = () => {\n  _s();\n\n  return React.useContext(CosmWasmContext);\n};\n\n_s(useSdk, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function SdkProvider(_ref) {\n  _s2();\n\n  let {\n    config: configProp,\n    children\n  } = _ref;\n  const [config, setConfig] = useState(configProp);\n  const [signer, setSigner] = useState();\n  const [client, setClient] = useState();\n  const [signClient, setSignClient] = useState();\n  const contextWithInit = useMemo(() => ({ ...defaultContext,\n    init: setSigner\n  }), []);\n  const [value, setValue] = useState(contextWithInit);\n  const clear = useCallback(() => {\n    setValue({ ...contextWithInit\n    });\n    setClient(undefined);\n    setSigner(undefined);\n    setConfig(configProp);\n  }, [contextWithInit, configProp]);\n\n  function changeConfig(updates) {\n    setConfig(config => ({ ...config,\n      ...updates\n    }));\n  }\n\n  const refreshBalance = useCallback(async (address, balance) => {\n    if (!client) return;\n    balance.length = 0;\n    const coin = await client.getBalance(address, config.token.coinMinimalDenom);\n    if (coin) balance.push(coin);\n  }, [client, config]);\n  useEffect(() => {\n    (async function updateClient() {\n      // TODO: Catch errors\n      const client = await createSimpleClient(config);\n      setClient(client);\n      setValue({ ...contextWithInit,\n        client\n      });\n    })();\n  }, [contextWithInit, config]);\n  useEffect(() => {\n    if (!signer) return;\n\n    (async function updateSignClient() {\n      // TODO: Catch errors\n      const client = await createClient(config, signer);\n      setSignClient(client);\n    })();\n  }, [signer, config]);\n  useEffect(() => {\n    if (!signer || !client || !signClient) return;\n    const balance = [];\n\n    (async function updateValue() {\n      const address = (await signer.getAccounts())[0].address;\n      await refreshBalance(address, balance);\n      setValue({\n        initialized: true,\n        init: () => {},\n        clear,\n        config,\n        client,\n        changeConfig,\n        address,\n        balance,\n        refreshBalance: refreshBalance.bind(null, address, balance),\n        getSigner: () => signer,\n        changeSigner: setSigner,\n        getSignClient: () => signClient\n      });\n    })();\n  }, [signClient, signer, clear, client, config, refreshBalance]);\n  return /*#__PURE__*/_jsxDEV(CosmWasmContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 10\n  }, this);\n}\n\n_s2(SdkProvider, \"5bNesRmPCzMoOrejvFLsmHEjsY4=\");\n\n_c = SdkProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SdkProvider\");","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/services/client/wallet.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","createClient","createSimpleClient","throwNotInitialized","Error","defaultContext","initialized","init","clear","config","client","undefined","changeConfig","address","balance","refreshBalance","getSigner","changeSigner","getSignClient","CosmWasmContext","createContext","useSdk","useContext","SdkProvider","configProp","children","setConfig","signer","setSigner","setClient","signClient","setSignClient","contextWithInit","value","setValue","updates","length","coin","getBalance","token","coinMinimalDenom","push","updateClient","updateSignClient","updateValue","getAccounts","bind"],"mappings":"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","sourcesContent":["import { CosmWasmClient, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin } from \"@cosmjs/stargate\";\nimport { OfflineSigner } from \"@cosmjs/proto-signing\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { AppConfig } from \"../config/network\";\nimport { createClient, createSimpleClient } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly init: (signer: OfflineSigner) => void;\n  readonly clear: () => void;\n  readonly config: Partial<AppConfig>;\n  readonly client: CosmWasmClient | undefined;\n  readonly changeConfig: (updates: Partial<AppConfig>) => void;\n  readonly address: string;\n  readonly balance: readonly Coin[];\n  readonly refreshBalance: () => Promise<void>;\n  readonly getSigner: () => OfflineSigner | undefined;\n  readonly changeSigner: (newSigner: OfflineSigner) => void;\n  readonly getSignClient: () => SigningCosmWasmClient | undefined;\n}\n\nfunction throwNotInitialized(): any {\n  throw new Error(\"Not yet initialized\");\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  init: throwNotInitialized,\n  clear: throwNotInitialized,\n  config: {},\n  client: undefined,\n  changeConfig: throwNotInitialized,\n  address: \"\",\n  balance: [],\n  refreshBalance: throwNotInitialized,\n  getSigner: () => undefined,\n  changeSigner: throwNotInitialized,\n  getSignClient: () => undefined,\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface SdkProviderProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly config: AppConfig;\n}\n\nexport function SdkProvider({ config: configProp, children }: SdkProviderProps): JSX.Element {\n  const [config, setConfig] = useState(configProp);\n  const [signer, setSigner] = useState<OfflineSigner>();\n  const [client, setClient] = useState<CosmWasmClient>();\n  const [signClient, setSignClient] = useState<SigningCosmWasmClient>();\n\n  const contextWithInit = useMemo(() => ({ ...defaultContext, init: setSigner }), []);\n  const [value, setValue] = useState<CosmWasmContextType>(contextWithInit);\n\n  const clear = useCallback(() => {\n    setValue({ ...contextWithInit });\n    setClient(undefined);\n    setSigner(undefined);\n    setConfig(configProp);\n  }, [contextWithInit, configProp]);\n\n  function changeConfig(updates: Partial<AppConfig>): void {\n    setConfig((config) => ({ ...config, ...updates }));\n  }\n\n  const refreshBalance = useCallback(async (address: string, balance: Coin[]): Promise<void> => {\n    if (!client) return;\n\n    balance.length = 0;\n    const coin = await client.getBalance(address, config.token.coinMinimalDenom);\n    if (coin) balance.push(coin);\n  }, [client, config]);\n\n  useEffect(() => {\n    (async function updateClient(): Promise<void> {\n      // TODO: Catch errors\n      const client = await createSimpleClient(config);\n      setClient(client);\n      setValue({ ...contextWithInit, client })\n    })();\n  }, [contextWithInit, config]);\n\n  useEffect(() => {\n    if (!signer) return;\n\n    (async function updateSignClient(): Promise<void> {\n      // TODO: Catch errors\n      const client = await createClient(config, signer);\n      setSignClient(client);\n    })();\n  }, [signer, config]);\n\n  useEffect(() => {\n    if (!signer || !client || !signClient) return;\n\n    const balance: Coin[] = [];\n\n    (async function updateValue(): Promise<void> {\n      const address = (await signer.getAccounts())[0].address;\n\n      await refreshBalance(address, balance);\n\n      setValue({\n        initialized: true,\n        init: () => {},\n        clear,\n        config,\n        client,\n        changeConfig,\n        address,\n        balance,\n        refreshBalance: refreshBalance.bind(null, address, balance),\n        getSigner: () => signer,\n        changeSigner: setSigner,\n        getSignClient: () => signClient,\n      });\n    })();\n  }, [signClient, signer, clear, client, config, refreshBalance]);\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}