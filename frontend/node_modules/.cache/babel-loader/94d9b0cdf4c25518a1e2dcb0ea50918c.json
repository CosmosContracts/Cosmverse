{"ast":null,"code":"import _slicedToArray from \"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useRangeSlider } from \"./use-range-slider\";\n\nvar _createContext = createContext({\n  name: \"SliderContext\",\n  errorMessage: \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    RangeSliderProvider = _createContext2[0],\n    useRangeSliderContext = _createContext2[1];\n\nexport { RangeSliderProvider, useRangeSliderContext };\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\n\nexport var RangeSlider = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Slider\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useTheme = useTheme(),\n      direction = _useTheme.direction;\n\n  ownProps.direction = direction;\n\n  var _useRangeSlider = useRangeSlider(ownProps),\n      getRootProps = _useRangeSlider.getRootProps,\n      context = _objectWithoutPropertiesLoose(_useRangeSlider, [\"getRootProps\"]);\n\n  var ctx = React.useMemo(function () {\n    return _extends({}, context, {\n      name: props.name\n    });\n  }, [context, props.name]);\n  return /*#__PURE__*/React.createElement(RangeSliderProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, getRootProps({}, ref), {\n    className: \"chakra-slider\",\n    __css: styles.container\n  }), props.children)));\n});\nRangeSlider.defaultProps = {\n  orientation: \"horizontal\"\n};\n\nif (__DEV__) {\n  RangeSlider.displayName = \"RangeSlider\";\n}\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\n\n\nexport var RangeSliderThumb = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useRangeSliderContex = useRangeSliderContext(),\n      getThumbProps = _useRangeSliderContex.getThumbProps,\n      getInputProps = _useRangeSliderContex.getInputProps,\n      name = _useRangeSliderContex.name;\n\n  var styles = useStyles();\n  var thumbProps = getThumbProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, thumbProps, {\n    className: cx(\"chakra-slider__thumb\", props.className),\n    __css: styles.thumb\n  }), thumbProps.children, name && /*#__PURE__*/React.createElement(\"input\", getInputProps({\n    index: props.index\n  })));\n});\n\nif (__DEV__) {\n  RangeSliderThumb.displayName = \"RangeSliderThumb\";\n}\n\nexport var RangeSliderTrack = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useRangeSliderContex2 = useRangeSliderContext(),\n      getTrackProps = _useRangeSliderContex2.getTrackProps;\n\n  var styles = useStyles();\n  var trackProps = getTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: cx(\"chakra-slider__track\", props.className),\n    __css: styles.track\n  }));\n});\n\nif (__DEV__) {\n  RangeSliderTrack.displayName = \"RangeSliderTrack\";\n}\n\nexport var RangeSliderFilledTrack = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useRangeSliderContex3 = useRangeSliderContext(),\n      getInnerTrackProps = _useRangeSliderContex3.getInnerTrackProps;\n\n  var styles = useStyles();\n  var trackProps = getInnerTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: \"chakra-slider__filled-track\",\n    __css: styles.filledTrack\n  }));\n});\n\nif (__DEV__) {\n  RangeSliderFilledTrack.displayName = \"RangeSliderFilledTrack\";\n}\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\n\n\nexport var RangeSliderMark = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useRangeSliderContex4 = useRangeSliderContext(),\n      getMarkerProps = _useRangeSliderContex4.getMarkerProps;\n\n  var markProps = getMarkerProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, markProps, {\n    className: cx(\"chakra-slider__marker\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  RangeSliderMark.displayName = \"RangeSliderMark\";\n}","map":null,"metadata":{},"sourceType":"module"}