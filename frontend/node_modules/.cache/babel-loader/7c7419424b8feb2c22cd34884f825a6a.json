{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AminoTypes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nfunction omitDefault(input) {\n  if (typeof input === \"string\") {\n    return input === \"\" ? undefined : input;\n  }\n\n  if (typeof input === \"number\") {\n    return input === 0 ? undefined : input;\n  }\n\n  if (long_1.default.isLong(input)) {\n    return input.isZero() ? undefined : input;\n  }\n\n  throw new Error(`Got unsupported type '${typeof input}'`);\n}\n\nfunction createDefaultTypes(prefix) {\n  return {\n    \"/cosmos.bank.v1beta1.MsgSend\": {\n      aminoType: \"cosmos-sdk/MsgSend\",\n      toAmino: _ref => {\n        let {\n          fromAddress,\n          toAddress,\n          amount\n        } = _ref;\n        return {\n          from_address: fromAddress,\n          to_address: toAddress,\n          amount: [...amount]\n        };\n      },\n      fromAmino: _ref2 => {\n        let {\n          from_address,\n          to_address,\n          amount\n        } = _ref2;\n        return {\n          fromAddress: from_address,\n          toAddress: to_address,\n          amount: [...amount]\n        };\n      }\n    },\n    \"/cosmos.bank.v1beta1.MsgMultiSend\": {\n      aminoType: \"cosmos-sdk/MsgMultiSend\",\n      toAmino: _ref3 => {\n        let {\n          inputs,\n          outputs\n        } = _ref3;\n        return {\n          inputs: inputs.map(input => ({\n            address: input.address,\n            coins: [...input.coins]\n          })),\n          outputs: outputs.map(output => ({\n            address: output.address,\n            coins: [...output.coins]\n          }))\n        };\n      },\n      fromAmino: _ref4 => {\n        let {\n          inputs,\n          outputs\n        } = _ref4;\n        return {\n          inputs: inputs.map(input => ({\n            address: input.address,\n            coins: [...input.coins]\n          })),\n          outputs: outputs.map(output => ({\n            address: output.address,\n            coins: [...output.coins]\n          }))\n        };\n      }\n    },\n    \"/cosmos.distribution.v1beta1.MsgFundCommunityPool\": {\n      aminoType: \"cosmos-sdk/MsgFundCommunityPool\",\n      toAmino: _ref5 => {\n        let {\n          amount,\n          depositor\n        } = _ref5;\n        return {\n          amount: [...amount],\n          depositor: depositor\n        };\n      },\n      fromAmino: _ref6 => {\n        let {\n          amount,\n          depositor\n        } = _ref6;\n        return {\n          amount: [...amount],\n          depositor: depositor\n        };\n      }\n    },\n    \"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\": {\n      aminoType: \"cosmos-sdk/MsgModifyWithdrawAddress\",\n      toAmino: _ref7 => {\n        let {\n          delegatorAddress,\n          withdrawAddress\n        } = _ref7;\n        return {\n          delegator_address: delegatorAddress,\n          withdraw_address: withdrawAddress\n        };\n      },\n      fromAmino: _ref8 => {\n        let {\n          delegator_address,\n          withdraw_address\n        } = _ref8;\n        return {\n          delegatorAddress: delegator_address,\n          withdrawAddress: withdraw_address\n        };\n      }\n    },\n    \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\": {\n      aminoType: \"cosmos-sdk/MsgWithdrawDelegationReward\",\n      toAmino: _ref9 => {\n        let {\n          delegatorAddress,\n          validatorAddress\n        } = _ref9;\n        return {\n          delegator_address: delegatorAddress,\n          validator_address: validatorAddress\n        };\n      },\n      fromAmino: _ref10 => {\n        let {\n          delegator_address,\n          validator_address\n        } = _ref10;\n        return {\n          delegatorAddress: delegator_address,\n          validatorAddress: validator_address\n        };\n      }\n    },\n    \"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\": {\n      aminoType: \"cosmos-sdk/MsgWithdrawValidatorCommission\",\n      toAmino: _ref11 => {\n        let {\n          validatorAddress\n        } = _ref11;\n        return {\n          validator_address: validatorAddress\n        };\n      },\n      fromAmino: _ref12 => {\n        let {\n          validator_address\n        } = _ref12;\n        return {\n          validatorAddress: validator_address\n        };\n      }\n    },\n    \"/cosmos.staking.v1beta1.MsgBeginRedelegate\": {\n      aminoType: \"cosmos-sdk/MsgBeginRedelegate\",\n      toAmino: _ref13 => {\n        let {\n          delegatorAddress,\n          validatorSrcAddress,\n          validatorDstAddress,\n          amount\n        } = _ref13;\n        utils_1.assertDefinedAndNotNull(amount, \"missing amount\");\n        return {\n          delegator_address: delegatorAddress,\n          validator_src_address: validatorSrcAddress,\n          validator_dst_address: validatorDstAddress,\n          amount: amount\n        };\n      },\n      fromAmino: _ref14 => {\n        let {\n          delegator_address,\n          validator_src_address,\n          validator_dst_address,\n          amount\n        } = _ref14;\n        return {\n          delegatorAddress: delegator_address,\n          validatorSrcAddress: validator_src_address,\n          validatorDstAddress: validator_dst_address,\n          amount: amount\n        };\n      }\n    },\n    \"/cosmos.staking.v1beta1.MsgCreateValidator\": {\n      aminoType: \"cosmos-sdk/MsgCreateValidator\",\n      toAmino: _ref15 => {\n        let {\n          description,\n          commission,\n          minSelfDelegation,\n          delegatorAddress,\n          validatorAddress,\n          pubkey,\n          value\n        } = _ref15;\n        utils_1.assertDefinedAndNotNull(description, \"missing description\");\n        utils_1.assertDefinedAndNotNull(commission, \"missing commission\");\n        utils_1.assertDefinedAndNotNull(pubkey, \"missing pubkey\");\n        utils_1.assertDefinedAndNotNull(value, \"missing value\");\n        return {\n          description: {\n            moniker: description.moniker,\n            identity: description.identity,\n            website: description.website,\n            security_contact: description.securityContact,\n            details: description.details\n          },\n          commission: {\n            rate: commission.rate,\n            max_rate: commission.maxRate,\n            max_change_rate: commission.maxChangeRate\n          },\n          min_self_delegation: minSelfDelegation,\n          delegator_address: delegatorAddress,\n          validator_address: validatorAddress,\n          pubkey: amino_1.encodeBech32Pubkey({\n            type: \"tendermint/PubKeySecp256k1\",\n            value: encoding_1.toBase64(pubkey.value)\n          }, prefix),\n          value: value\n        };\n      },\n      fromAmino: _ref16 => {\n        let {\n          description,\n          commission,\n          min_self_delegation,\n          delegator_address,\n          validator_address,\n          pubkey,\n          value\n        } = _ref16;\n        const decodedPubkey = amino_1.decodeBech32Pubkey(pubkey);\n\n        if (decodedPubkey.type !== \"tendermint/PubKeySecp256k1\") {\n          throw new Error(\"Only Secp256k1 public keys are supported\");\n        }\n\n        return {\n          description: {\n            moniker: description.moniker,\n            identity: description.identity,\n            website: description.website,\n            securityContact: description.security_contact,\n            details: description.details\n          },\n          commission: {\n            rate: commission.rate,\n            maxRate: commission.max_rate,\n            maxChangeRate: commission.max_change_rate\n          },\n          minSelfDelegation: min_self_delegation,\n          delegatorAddress: delegator_address,\n          validatorAddress: validator_address,\n          pubkey: {\n            typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n            value: encoding_1.fromBase64(decodedPubkey.value)\n          },\n          value: value\n        };\n      }\n    },\n    \"/cosmos.staking.v1beta1.MsgDelegate\": {\n      aminoType: \"cosmos-sdk/MsgDelegate\",\n      toAmino: _ref17 => {\n        let {\n          delegatorAddress,\n          validatorAddress,\n          amount\n        } = _ref17;\n        utils_1.assertDefinedAndNotNull(amount, \"missing amount\");\n        return {\n          delegator_address: delegatorAddress,\n          validator_address: validatorAddress,\n          amount: amount\n        };\n      },\n      fromAmino: _ref18 => {\n        let {\n          delegator_address,\n          validator_address,\n          amount\n        } = _ref18;\n        return {\n          delegatorAddress: delegator_address,\n          validatorAddress: validator_address,\n          amount: amount\n        };\n      }\n    },\n    \"/cosmos.staking.v1beta1.MsgEditValidator\": {\n      aminoType: \"cosmos-sdk/MsgEditValidator\",\n      toAmino: _ref19 => {\n        let {\n          description,\n          commissionRate,\n          minSelfDelegation,\n          validatorAddress\n        } = _ref19;\n        utils_1.assertDefinedAndNotNull(description, \"missing description\");\n        return {\n          description: {\n            moniker: description.moniker,\n            identity: description.identity,\n            website: description.website,\n            security_contact: description.securityContact,\n            details: description.details\n          },\n          commission_rate: commissionRate,\n          min_self_delegation: minSelfDelegation,\n          validator_address: validatorAddress\n        };\n      },\n      fromAmino: _ref20 => {\n        let {\n          description,\n          commission_rate,\n          min_self_delegation,\n          validator_address\n        } = _ref20;\n        return {\n          description: {\n            moniker: description.moniker,\n            identity: description.identity,\n            website: description.website,\n            securityContact: description.security_contact,\n            details: description.details\n          },\n          commissionRate: commission_rate,\n          minSelfDelegation: min_self_delegation,\n          validatorAddress: validator_address\n        };\n      }\n    },\n    \"/cosmos.staking.v1beta1.MsgUndelegate\": {\n      aminoType: \"cosmos-sdk/MsgUndelegate\",\n      toAmino: _ref21 => {\n        let {\n          delegatorAddress,\n          validatorAddress,\n          amount\n        } = _ref21;\n        utils_1.assertDefinedAndNotNull(amount, \"missing amount\");\n        return {\n          delegator_address: delegatorAddress,\n          validator_address: validatorAddress,\n          amount: amount\n        };\n      },\n      fromAmino: _ref22 => {\n        let {\n          delegator_address,\n          validator_address,\n          amount\n        } = _ref22;\n        return {\n          delegatorAddress: delegator_address,\n          validatorAddress: validator_address,\n          amount: amount\n        };\n      }\n    },\n    \"/ibc.applications.transfer.v1.MsgTransfer\": {\n      aminoType: \"cosmos-sdk/MsgTransfer\",\n      toAmino: _ref23 => {\n        let {\n          sourcePort,\n          sourceChannel,\n          token,\n          sender,\n          receiver,\n          timeoutHeight,\n          timeoutTimestamp\n        } = _ref23;\n\n        var _a, _b, _c;\n\n        return {\n          source_port: sourcePort,\n          source_channel: sourceChannel,\n          token: token,\n          sender: sender,\n          receiver: receiver,\n          timeout_height: timeoutHeight ? {\n            revision_height: (_a = omitDefault(timeoutHeight.revisionHeight)) === null || _a === void 0 ? void 0 : _a.toString(),\n            revision_number: (_b = omitDefault(timeoutHeight.revisionNumber)) === null || _b === void 0 ? void 0 : _b.toString()\n          } : {},\n          timeout_timestamp: (_c = omitDefault(timeoutTimestamp)) === null || _c === void 0 ? void 0 : _c.toString()\n        };\n      },\n      fromAmino: _ref24 => {\n        let {\n          source_port,\n          source_channel,\n          token,\n          sender,\n          receiver,\n          timeout_height,\n          timeout_timestamp\n        } = _ref24;\n        return {\n          sourcePort: source_port,\n          sourceChannel: source_channel,\n          token: token,\n          sender: sender,\n          receiver: receiver,\n          timeoutHeight: timeout_height ? {\n            revisionHeight: long_1.default.fromString(timeout_height.revision_height || \"0\", true),\n            revisionNumber: long_1.default.fromString(timeout_height.revision_number || \"0\", true)\n          } : undefined,\n          timeoutTimestamp: long_1.default.fromString(timeout_timestamp || \"0\", true)\n        };\n      }\n    }\n  };\n}\n/**\n * A map from Stargate message types as used in the messages's `Any` type\n * to Amino types.\n */\n\n\nclass AminoTypes {\n  constructor() {\n    let {\n      additions = {},\n      prefix = \"cosmos\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const additionalAminoTypes = Object.values(additions);\n    const filteredDefaultTypes = Object.entries(createDefaultTypes(prefix)).reduce((acc, _ref25) => {\n      let [key, value] = _ref25;\n      return additionalAminoTypes.find(_ref26 => {\n        let {\n          aminoType\n        } = _ref26;\n        return value.aminoType === aminoType;\n      }) ? acc : Object.assign(Object.assign({}, acc), {\n        [key]: value\n      });\n    }, {});\n    this.register = Object.assign(Object.assign({}, filteredDefaultTypes), additions);\n  }\n\n  toAmino(_ref27) {\n    let {\n      typeUrl,\n      value\n    } = _ref27;\n    const converter = this.register[typeUrl];\n\n    if (!converter) {\n      throw new Error(\"Type URL does not exist in the Amino message type register. \" + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n    }\n\n    return {\n      type: converter.aminoType,\n      value: converter.toAmino(value)\n    };\n  }\n\n  fromAmino(_ref28) {\n    let {\n      type,\n      value\n    } = _ref28;\n    const result = Object.entries(this.register).find(_ref29 => {\n      let [_typeUrl, {\n        aminoType\n      }] = _ref29;\n      return aminoType === type;\n    });\n\n    if (!result) {\n      throw new Error(\"Type does not exist in the Amino message type register. \" + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n    }\n\n    const [typeUrl, converter] = result;\n    return {\n      typeUrl: typeUrl,\n      value: converter.fromAmino(value)\n    };\n  }\n\n}\n\nexports.AminoTypes = AminoTypes;","map":{"version":3,"sources":["../src/aminotypes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AminoTypes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst long_1 = __importDefault(require(\"long\"));\nfunction omitDefault(input) {\n    if (typeof input === \"string\") {\n        return input === \"\" ? undefined : input;\n    }\n    if (typeof input === \"number\") {\n        return input === 0 ? undefined : input;\n    }\n    if (long_1.default.isLong(input)) {\n        return input.isZero() ? undefined : input;\n    }\n    throw new Error(`Got unsupported type '${typeof input}'`);\n}\nfunction createDefaultTypes(prefix) {\n    return {\n        \"/cosmos.bank.v1beta1.MsgSend\": {\n            aminoType: \"cosmos-sdk/MsgSend\",\n            toAmino: ({ fromAddress, toAddress, amount }) => ({\n                from_address: fromAddress,\n                to_address: toAddress,\n                amount: [...amount],\n            }),\n            fromAmino: ({ from_address, to_address, amount }) => ({\n                fromAddress: from_address,\n                toAddress: to_address,\n                amount: [...amount],\n            }),\n        },\n        \"/cosmos.bank.v1beta1.MsgMultiSend\": {\n            aminoType: \"cosmos-sdk/MsgMultiSend\",\n            toAmino: ({ inputs, outputs }) => ({\n                inputs: inputs.map((input) => ({\n                    address: input.address,\n                    coins: [...input.coins],\n                })),\n                outputs: outputs.map((output) => ({\n                    address: output.address,\n                    coins: [...output.coins],\n                })),\n            }),\n            fromAmino: ({ inputs, outputs }) => ({\n                inputs: inputs.map((input) => ({\n                    address: input.address,\n                    coins: [...input.coins],\n                })),\n                outputs: outputs.map((output) => ({\n                    address: output.address,\n                    coins: [...output.coins],\n                })),\n            }),\n        },\n        \"/cosmos.distribution.v1beta1.MsgFundCommunityPool\": {\n            aminoType: \"cosmos-sdk/MsgFundCommunityPool\",\n            toAmino: ({ amount, depositor }) => ({\n                amount: [...amount],\n                depositor: depositor,\n            }),\n            fromAmino: ({ amount, depositor }) => ({\n                amount: [...amount],\n                depositor: depositor,\n            }),\n        },\n        \"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\": {\n            aminoType: \"cosmos-sdk/MsgModifyWithdrawAddress\",\n            toAmino: ({ delegatorAddress, withdrawAddress, }) => ({\n                delegator_address: delegatorAddress,\n                withdraw_address: withdrawAddress,\n            }),\n            fromAmino: ({ delegator_address, withdraw_address, }) => ({\n                delegatorAddress: delegator_address,\n                withdrawAddress: withdraw_address,\n            }),\n        },\n        \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\": {\n            aminoType: \"cosmos-sdk/MsgWithdrawDelegationReward\",\n            toAmino: ({ delegatorAddress, validatorAddress, }) => ({\n                delegator_address: delegatorAddress,\n                validator_address: validatorAddress,\n            }),\n            fromAmino: ({ delegator_address, validator_address, }) => ({\n                delegatorAddress: delegator_address,\n                validatorAddress: validator_address,\n            }),\n        },\n        \"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\": {\n            aminoType: \"cosmos-sdk/MsgWithdrawValidatorCommission\",\n            toAmino: ({ validatorAddress, }) => ({\n                validator_address: validatorAddress,\n            }),\n            fromAmino: ({ validator_address, }) => ({\n                validatorAddress: validator_address,\n            }),\n        },\n        \"/cosmos.staking.v1beta1.MsgBeginRedelegate\": {\n            aminoType: \"cosmos-sdk/MsgBeginRedelegate\",\n            toAmino: ({ delegatorAddress, validatorSrcAddress, validatorDstAddress, amount, }) => {\n                utils_1.assertDefinedAndNotNull(amount, \"missing amount\");\n                return {\n                    delegator_address: delegatorAddress,\n                    validator_src_address: validatorSrcAddress,\n                    validator_dst_address: validatorDstAddress,\n                    amount: amount,\n                };\n            },\n            fromAmino: ({ delegator_address, validator_src_address, validator_dst_address, amount, }) => ({\n                delegatorAddress: delegator_address,\n                validatorSrcAddress: validator_src_address,\n                validatorDstAddress: validator_dst_address,\n                amount: amount,\n            }),\n        },\n        \"/cosmos.staking.v1beta1.MsgCreateValidator\": {\n            aminoType: \"cosmos-sdk/MsgCreateValidator\",\n            toAmino: ({ description, commission, minSelfDelegation, delegatorAddress, validatorAddress, pubkey, value, }) => {\n                utils_1.assertDefinedAndNotNull(description, \"missing description\");\n                utils_1.assertDefinedAndNotNull(commission, \"missing commission\");\n                utils_1.assertDefinedAndNotNull(pubkey, \"missing pubkey\");\n                utils_1.assertDefinedAndNotNull(value, \"missing value\");\n                return {\n                    description: {\n                        moniker: description.moniker,\n                        identity: description.identity,\n                        website: description.website,\n                        security_contact: description.securityContact,\n                        details: description.details,\n                    },\n                    commission: {\n                        rate: commission.rate,\n                        max_rate: commission.maxRate,\n                        max_change_rate: commission.maxChangeRate,\n                    },\n                    min_self_delegation: minSelfDelegation,\n                    delegator_address: delegatorAddress,\n                    validator_address: validatorAddress,\n                    pubkey: amino_1.encodeBech32Pubkey({\n                        type: \"tendermint/PubKeySecp256k1\",\n                        value: encoding_1.toBase64(pubkey.value),\n                    }, prefix),\n                    value: value,\n                };\n            },\n            fromAmino: ({ description, commission, min_self_delegation, delegator_address, validator_address, pubkey, value, }) => {\n                const decodedPubkey = amino_1.decodeBech32Pubkey(pubkey);\n                if (decodedPubkey.type !== \"tendermint/PubKeySecp256k1\") {\n                    throw new Error(\"Only Secp256k1 public keys are supported\");\n                }\n                return {\n                    description: {\n                        moniker: description.moniker,\n                        identity: description.identity,\n                        website: description.website,\n                        securityContact: description.security_contact,\n                        details: description.details,\n                    },\n                    commission: {\n                        rate: commission.rate,\n                        maxRate: commission.max_rate,\n                        maxChangeRate: commission.max_change_rate,\n                    },\n                    minSelfDelegation: min_self_delegation,\n                    delegatorAddress: delegator_address,\n                    validatorAddress: validator_address,\n                    pubkey: {\n                        typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n                        value: encoding_1.fromBase64(decodedPubkey.value),\n                    },\n                    value: value,\n                };\n            },\n        },\n        \"/cosmos.staking.v1beta1.MsgDelegate\": {\n            aminoType: \"cosmos-sdk/MsgDelegate\",\n            toAmino: ({ delegatorAddress, validatorAddress, amount }) => {\n                utils_1.assertDefinedAndNotNull(amount, \"missing amount\");\n                return {\n                    delegator_address: delegatorAddress,\n                    validator_address: validatorAddress,\n                    amount: amount,\n                };\n            },\n            fromAmino: ({ delegator_address, validator_address, amount, }) => ({\n                delegatorAddress: delegator_address,\n                validatorAddress: validator_address,\n                amount: amount,\n            }),\n        },\n        \"/cosmos.staking.v1beta1.MsgEditValidator\": {\n            aminoType: \"cosmos-sdk/MsgEditValidator\",\n            toAmino: ({ description, commissionRate, minSelfDelegation, validatorAddress, }) => {\n                utils_1.assertDefinedAndNotNull(description, \"missing description\");\n                return {\n                    description: {\n                        moniker: description.moniker,\n                        identity: description.identity,\n                        website: description.website,\n                        security_contact: description.securityContact,\n                        details: description.details,\n                    },\n                    commission_rate: commissionRate,\n                    min_self_delegation: minSelfDelegation,\n                    validator_address: validatorAddress,\n                };\n            },\n            fromAmino: ({ description, commission_rate, min_self_delegation, validator_address, }) => ({\n                description: {\n                    moniker: description.moniker,\n                    identity: description.identity,\n                    website: description.website,\n                    securityContact: description.security_contact,\n                    details: description.details,\n                },\n                commissionRate: commission_rate,\n                minSelfDelegation: min_self_delegation,\n                validatorAddress: validator_address,\n            }),\n        },\n        \"/cosmos.staking.v1beta1.MsgUndelegate\": {\n            aminoType: \"cosmos-sdk/MsgUndelegate\",\n            toAmino: ({ delegatorAddress, validatorAddress, amount, }) => {\n                utils_1.assertDefinedAndNotNull(amount, \"missing amount\");\n                return {\n                    delegator_address: delegatorAddress,\n                    validator_address: validatorAddress,\n                    amount: amount,\n                };\n            },\n            fromAmino: ({ delegator_address, validator_address, amount, }) => ({\n                delegatorAddress: delegator_address,\n                validatorAddress: validator_address,\n                amount: amount,\n            }),\n        },\n        \"/ibc.applications.transfer.v1.MsgTransfer\": {\n            aminoType: \"cosmos-sdk/MsgTransfer\",\n            toAmino: ({ sourcePort, sourceChannel, token, sender, receiver, timeoutHeight, timeoutTimestamp, }) => {\n                var _a, _b, _c;\n                return ({\n                    source_port: sourcePort,\n                    source_channel: sourceChannel,\n                    token: token,\n                    sender: sender,\n                    receiver: receiver,\n                    timeout_height: timeoutHeight\n                        ? {\n                            revision_height: (_a = omitDefault(timeoutHeight.revisionHeight)) === null || _a === void 0 ? void 0 : _a.toString(),\n                            revision_number: (_b = omitDefault(timeoutHeight.revisionNumber)) === null || _b === void 0 ? void 0 : _b.toString(),\n                        }\n                        : {},\n                    timeout_timestamp: (_c = omitDefault(timeoutTimestamp)) === null || _c === void 0 ? void 0 : _c.toString(),\n                });\n            },\n            fromAmino: ({ source_port, source_channel, token, sender, receiver, timeout_height, timeout_timestamp, }) => ({\n                sourcePort: source_port,\n                sourceChannel: source_channel,\n                token: token,\n                sender: sender,\n                receiver: receiver,\n                timeoutHeight: timeout_height\n                    ? {\n                        revisionHeight: long_1.default.fromString(timeout_height.revision_height || \"0\", true),\n                        revisionNumber: long_1.default.fromString(timeout_height.revision_number || \"0\", true),\n                    }\n                    : undefined,\n                timeoutTimestamp: long_1.default.fromString(timeout_timestamp || \"0\", true),\n            }),\n        },\n    };\n}\n/**\n * A map from Stargate message types as used in the messages's `Any` type\n * to Amino types.\n */\nclass AminoTypes {\n    constructor({ additions = {}, prefix = \"cosmos\" } = {}) {\n        const additionalAminoTypes = Object.values(additions);\n        const filteredDefaultTypes = Object.entries(createDefaultTypes(prefix)).reduce((acc, [key, value]) => additionalAminoTypes.find(({ aminoType }) => value.aminoType === aminoType)\n            ? acc\n            : Object.assign(Object.assign({}, acc), { [key]: value }), {});\n        this.register = Object.assign(Object.assign({}, filteredDefaultTypes), additions);\n    }\n    toAmino({ typeUrl, value }) {\n        const converter = this.register[typeUrl];\n        if (!converter) {\n            throw new Error(\"Type URL does not exist in the Amino message type register. \" +\n                \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" +\n                \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n        }\n        return {\n            type: converter.aminoType,\n            value: converter.toAmino(value),\n        };\n    }\n    fromAmino({ type, value }) {\n        const result = Object.entries(this.register).find(([_typeUrl, { aminoType }]) => aminoType === type);\n        if (!result) {\n            throw new Error(\"Type does not exist in the Amino message type register. \" +\n                \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" +\n                \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n        }\n        const [typeUrl, converter] = result;\n        return {\n            typeUrl: typeUrl,\n            value: converter.fromAmino(value),\n        };\n    }\n}\nexports.AminoTypes = AminoTypes;\n//# sourceMappingURL=aminotypes.js.map"]},"metadata":{},"sourceType":"script"}