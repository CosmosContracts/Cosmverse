{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codecimpl_1 = require(\"./generated/codecimpl\");\n\nfunction compress(proof) {\n  if (!proof.batch) {\n    return proof;\n  }\n\n  return {\n    compressed: compress_batch(proof.batch)\n  };\n}\n\nexports.compress = compress;\n\nfunction decompress(proof) {\n  if (!proof.compressed) {\n    return proof;\n  }\n\n  return {\n    batch: decompress_batch(proof.compressed)\n  };\n}\n\nexports.decompress = decompress; // tslint:disable:readonly-array\n\nfunction compress_batch(proof) {\n  var centries = [];\n  var lookup = [];\n  var registry = new Map();\n\n  var _iterator = _createForOfIteratorHelper(proof.entries),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entry = _step.value;\n\n      if (!!entry.exist) {\n        var centry = {\n          exist: compress_exist(entry.exist, lookup, registry)\n        };\n        centries.push(centry);\n      } else if (!!entry.nonexist) {\n        var non = entry.nonexist;\n        var _centry = {\n          nonexist: {\n            key: non.key,\n            left: compress_exist(non.left, lookup, registry),\n            right: compress_exist(non.right, lookup, registry)\n          }\n        };\n        centries.push(_centry);\n      } else {\n        throw new Error(\"Unexpected batch entry during compress\");\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    entries: centries,\n    lookupInners: lookup\n  };\n}\n\nfunction compress_exist(exist, lookup, registry) {\n  if (!exist) {\n    return undefined;\n  }\n\n  var path = exist.path.map(function (inner) {\n    var sig = codecimpl_1.ics23.InnerOp.encode(inner).finish();\n    var idx = registry.get(sig);\n\n    if (idx === undefined) {\n      idx = lookup.length;\n      lookup.push(inner);\n      registry.set(sig, idx);\n    }\n\n    return idx;\n  });\n  return {\n    key: exist.key,\n    value: exist.value,\n    leaf: exist.leaf,\n    path: path\n  };\n}\n\nfunction decompress_batch(proof) {\n  var lookup = proof.lookupInners;\n  var entries = proof.entries.map(function (comp) {\n    if (!!comp.exist) {\n      return {\n        exist: decompress_exist(comp.exist, lookup)\n      };\n    } else if (!!comp.nonexist) {\n      var non = comp.nonexist;\n      return {\n        nonexist: {\n          key: non.key,\n          left: decompress_exist(non.left, lookup),\n          right: decompress_exist(non.right, lookup)\n        }\n      };\n    } else {\n      throw new Error(\"Unexpected batch entry during compress\");\n    }\n  });\n  return {\n    entries: entries\n  };\n}\n\nfunction decompress_exist(exist, lookup) {\n  if (!exist) {\n    return undefined;\n  }\n\n  var key = exist.key,\n      value = exist.value,\n      leaf = exist.leaf,\n      path = exist.path;\n  var newPath = (path || []).map(function (idx) {\n    return lookup[idx];\n  });\n  return {\n    key: key,\n    value: value,\n    leaf: leaf,\n    path: newPath\n  };\n}","map":null,"metadata":{},"sourceType":"script"}