{"ast":null,"code":"import { CosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { defaultGasLimits as defaultStargateGasLimits, GasPrice } from \"@cosmjs/stargate\";\nexport async function loadKeplrWallet(chainId) {\n  const anyWindow = window;\n\n  if (!anyWindow.getOfflineSignerAuto) {\n    throw new Error(\"Keplr extension is not available\");\n  }\n\n  const signer = anyWindow.getOfflineSignerAuto(chainId);\n  return Promise.resolve(signer);\n} // this creates a new connection to a server at URL,\n\nexport async function createClient(config, signer) {\n  const gasLimits = { ...defaultStargateGasLimits,\n    upload: 1500000,\n    init: 600000,\n    exec: 400000,\n    migrate: 600000,\n    send: 80000,\n    changeAdmin: 80000\n  };\n  return SigningCosmWasmClient.connectWithSigner(config.rpcUrl, signer, {\n    prefix: config.addressPrefix,\n    gasPrice: GasPrice.fromString(`${config.gasPrice}${config.token.coinMinimalDenom}`),\n    gasLimits: gasLimits\n  });\n}\nexport function createSimpleClient(config) {\n  return CosmWasmClient.connect(config.rpcUrl);\n}","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/services/client/sdk.ts"],"names":["CosmWasmClient","SigningCosmWasmClient","defaultGasLimits","defaultStargateGasLimits","GasPrice","loadKeplrWallet","chainId","anyWindow","window","getOfflineSignerAuto","Error","signer","Promise","resolve","createClient","config","gasLimits","upload","init","exec","migrate","send","changeAdmin","connectWithSigner","rpcUrl","prefix","addressPrefix","gasPrice","fromString","token","coinMinimalDenom","createSimpleClient","connect"],"mappings":"AAAA,SAASA,cAAT,QAAiD,2BAAjD;AACA,SAASC,qBAAT,QAAsC,2BAAtC;AACA,SAASC,gBAAgB,IAAIC,wBAA7B,EAAkEC,QAAlE,QAAkF,kBAAlF;AAOA,OAAO,eAAeC,eAAf,CAA+BC,OAA/B,EAAwE;AAC7E,QAAMC,SAAS,GAAGC,MAAlB;;AACA,MAAI,CAACD,SAAS,CAACE,oBAAf,EAAqC;AACnC,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGJ,SAAS,CAACE,oBAAV,CAA+BH,OAA/B,CAAf;AAEA,SAAOM,OAAO,CAACC,OAAR,CAAgBF,MAAhB,CAAP;AACD,C,CAED;;AACA,OAAO,eAAeG,YAAf,CAA4BC,MAA5B,EAA+CJ,MAA/C,EAAsG;AAC3G,QAAMK,SAAsC,GAAG,EAC7C,GAAGb,wBAD0C;AAE7Cc,IAAAA,MAAM,EAAE,OAFqC;AAG7CC,IAAAA,IAAI,EAAE,MAHuC;AAI7CC,IAAAA,IAAI,EAAE,MAJuC;AAK7CC,IAAAA,OAAO,EAAE,MALoC;AAM7CC,IAAAA,IAAI,EAAE,KANuC;AAO7CC,IAAAA,WAAW,EAAE;AAPgC,GAA/C;AAUA,SAAOrB,qBAAqB,CAACsB,iBAAtB,CAAwCR,MAAM,CAACS,MAA/C,EAAuDb,MAAvD,EAA+D;AACpEc,IAAAA,MAAM,EAAEV,MAAM,CAACW,aADqD;AAEpEC,IAAAA,QAAQ,EAAEvB,QAAQ,CAACwB,UAAT,CAAqB,GAAEb,MAAM,CAACY,QAAS,GAAEZ,MAAM,CAACc,KAAP,CAAaC,gBAAiB,EAAvE,CAF0D;AAGpEd,IAAAA,SAAS,EAAEA;AAHyD,GAA/D,CAAP;AAKD;AAED,OAAO,SAASe,kBAAT,CAA4BhB,MAA5B,EAAwE;AAC7E,SAAOf,cAAc,CAACgC,OAAf,CAAuBjB,MAAM,CAACS,MAA9B,CAAP;AACD","sourcesContent":["import { CosmWasmClient, CosmWasmFeeTable } from \"@cosmjs/cosmwasm-stargate\";\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { defaultGasLimits as defaultStargateGasLimits, GasLimits, GasPrice } from \"@cosmjs/stargate\";\nimport { OfflineSigner } from \"@cosmjs/proto-signing\";\n\nimport { AppConfig } from \"../config/network\";\n\nexport type WalletLoader = (chainId: string, addressPrefix?: string) => Promise<OfflineSigner>;\n\nexport async function loadKeplrWallet(chainId: string): Promise<OfflineSigner> {\n  const anyWindow = window as any;\n  if (!anyWindow.getOfflineSignerAuto) {\n    throw new Error(\"Keplr extension is not available\");\n  }\n\n  const signer = anyWindow.getOfflineSignerAuto(chainId);\n\n  return Promise.resolve(signer);\n}\n\n// this creates a new connection to a server at URL,\nexport async function createClient(config: AppConfig, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\n    ...defaultStargateGasLimits,\n    upload: 1500000,\n    init: 600000,\n    exec: 400000,\n    migrate: 600000,\n    send: 80000,\n    changeAdmin: 80000,\n  };\n\n  return SigningCosmWasmClient.connectWithSigner(config.rpcUrl, signer, {\n    prefix: config.addressPrefix,\n    gasPrice: GasPrice.fromString(`${config.gasPrice}${config.token.coinMinimalDenom}`),\n    gasLimits: gasLimits,\n  });\n}\n\nexport function createSimpleClient(config: AppConfig): Promise<CosmWasmClient> {\n  return CosmWasmClient.connect(config.rpcUrl);\n}\n"]},"metadata":{},"sourceType":"module"}