{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CosmWasmClient = void 0;\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar math_1 = require(\"@cosmjs/math\");\n\nvar stargate_1 = require(\"@cosmjs/stargate\");\n\nvar tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nvar utils_1 = require(\"@cosmjs/utils\");\n\nvar types_1 = require(\"./codec/cosmwasm/wasm/v1beta1/types\");\n\nvar queries_1 = require(\"./queries\");\n\nvar CosmWasmClient = /*#__PURE__*/function () {\n  function CosmWasmClient(tmClient) {\n    _classCallCheck(this, CosmWasmClient);\n\n    this.codesCache = new Map();\n\n    if (tmClient) {\n      this.tmClient = tmClient;\n      this.queryClient = stargate_1.QueryClient.withExtensions(tmClient, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, queries_1.setupWasmExtension);\n    }\n  }\n\n  _createClass(CosmWasmClient, [{\n    key: \"getTmClient\",\n    value: function getTmClient() {\n      return this.tmClient;\n    }\n  }, {\n    key: \"forceGetTmClient\",\n    value: function forceGetTmClient() {\n      if (!this.tmClient) {\n        throw new Error(\"Tendermint client not available. You cannot use online functionality in offline mode.\");\n      }\n\n      return this.tmClient;\n    }\n  }, {\n    key: \"getQueryClient\",\n    value: function getQueryClient() {\n      return this.queryClient;\n    }\n  }, {\n    key: \"forceGetQueryClient\",\n    value: function forceGetQueryClient() {\n      if (!this.queryClient) {\n        throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n      }\n\n      return this.queryClient;\n    }\n  }, {\n    key: \"getChainId\",\n    value: function () {\n      var _getChainId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response, chainId;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.chainId) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.forceGetTmClient().status();\n\n              case 3:\n                response = _context.sent;\n                chainId = response.nodeInfo.network;\n\n                if (chainId) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Chain ID must not be empty\");\n\n              case 7:\n                this.chainId = chainId;\n\n              case 8:\n                return _context.abrupt(\"return\", this.chainId);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getChainId() {\n        return _getChainId.apply(this, arguments);\n      }\n\n      return getChainId;\n    }()\n  }, {\n    key: \"getHeight\",\n    value: function () {\n      var _getHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var status;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.forceGetTmClient().status();\n\n              case 2:\n                status = _context2.sent;\n                return _context2.abrupt(\"return\", status.syncInfo.latestBlockHeight);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getHeight() {\n        return _getHeight.apply(this, arguments);\n      }\n\n      return getHeight;\n    }()\n  }, {\n    key: \"getAccount\",\n    value: function () {\n      var _getAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(searchAddress) {\n        var account;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.forceGetQueryClient().auth.account(searchAddress);\n\n              case 3:\n                account = _context3.sent;\n                return _context3.abrupt(\"return\", account ? stargate_1.accountFromAny(account) : null);\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                if (!/rpc error: code = NotFound/i.test(_context3.t0)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 11:\n                throw _context3.t0;\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n\n      function getAccount(_x) {\n        return _getAccount.apply(this, arguments);\n      }\n\n      return getAccount;\n    }()\n  }, {\n    key: \"getSequence\",\n    value: function () {\n      var _getSequence = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(address) {\n        var account;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getAccount(address);\n\n              case 2:\n                account = _context4.sent;\n\n                if (account) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Account does not exist on chain. Send some tokens there before trying to query sequence.\");\n\n              case 5:\n                return _context4.abrupt(\"return\", {\n                  accountNumber: account.accountNumber,\n                  sequence: account.sequence\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getSequence(_x2) {\n        return _getSequence.apply(this, arguments);\n      }\n\n      return getSequence;\n    }()\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(height) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.forceGetTmClient().block(height);\n\n              case 2:\n                response = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  id: encoding_1.toHex(response.blockId.hash).toUpperCase(),\n                  header: {\n                    version: {\n                      block: new math_1.Uint53(response.block.header.version.block).toString(),\n                      app: new math_1.Uint53(response.block.header.version.app).toString()\n                    },\n                    height: response.block.header.height,\n                    chainId: response.block.header.chainId,\n                    time: tendermint_rpc_1.toRfc3339WithNanoseconds(response.block.header.time)\n                  },\n                  txs: response.block.txs\n                });\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getBlock(_x3) {\n        return _getBlock.apply(this, arguments);\n      }\n\n      return getBlock;\n    }()\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(address, searchDenom) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.forceGetQueryClient().bank.balance(address, searchDenom));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getBalance(_x4, _x5) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n  }, {\n    key: \"getTx\",\n    value: function () {\n      var _getTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {\n        var _a, results;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.txsQuery(\"tx.hash='\".concat(id, \"'\"));\n\n              case 2:\n                results = _context7.sent;\n                return _context7.abrupt(\"return\", (_a = results[0]) !== null && _a !== void 0 ? _a : null);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getTx(_x6) {\n        return _getTx.apply(this, arguments);\n      }\n\n      return getTx;\n    }()\n  }, {\n    key: \"searchTx\",\n    value: function () {\n      var _searchTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(query) {\n        var _this = this;\n\n        var filter,\n            minHeight,\n            maxHeight,\n            withFilters,\n            txs,\n            sentQuery,\n            receivedQuery,\n            _yield$Promise$all,\n            _yield$Promise$all2,\n            sent,\n            received,\n            sentHashes,\n            rawQuery,\n            filtered,\n            _args8 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                withFilters = function _withFilters(originalQuery) {\n                  return \"\".concat(originalQuery, \" AND tx.height>=\").concat(minHeight, \" AND tx.height<=\").concat(maxHeight);\n                };\n\n                filter = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n                minHeight = filter.minHeight || 0;\n                maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n\n                if (!(maxHeight < minHeight)) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", []);\n\n              case 6:\n                if (!stargate_1.isSearchByHeightQuery(query)) {\n                  _context8.next = 17;\n                  break;\n                }\n\n                if (!(query.height >= minHeight && query.height <= maxHeight)) {\n                  _context8.next = 13;\n                  break;\n                }\n\n                _context8.next = 10;\n                return this.txsQuery(\"tx.height=\".concat(query.height));\n\n              case 10:\n                _context8.t0 = _context8.sent;\n                _context8.next = 14;\n                break;\n\n              case 13:\n                _context8.t0 = [];\n\n              case 14:\n                txs = _context8.t0;\n                _context8.next = 38;\n                break;\n\n              case 17:\n                if (!stargate_1.isSearchBySentFromOrToQuery(query)) {\n                  _context8.next = 30;\n                  break;\n                }\n\n                sentQuery = withFilters(\"message.module='bank' AND transfer.sender='\".concat(query.sentFromOrTo, \"'\"));\n                receivedQuery = withFilters(\"message.module='bank' AND transfer.recipient='\".concat(query.sentFromOrTo, \"'\"));\n                _context8.next = 22;\n                return Promise.all([sentQuery, receivedQuery].map(function (rawQuery) {\n                  return _this.txsQuery(rawQuery);\n                }));\n\n              case 22:\n                _yield$Promise$all = _context8.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                sent = _yield$Promise$all2[0];\n                received = _yield$Promise$all2[1];\n                sentHashes = sent.map(function (t) {\n                  return t.hash;\n                });\n                txs = [].concat(_toConsumableArray(sent), _toConsumableArray(received.filter(function (t) {\n                  return !sentHashes.includes(t.hash);\n                })));\n                _context8.next = 38;\n                break;\n\n              case 30:\n                if (!stargate_1.isSearchByTagsQuery(query)) {\n                  _context8.next = 37;\n                  break;\n                }\n\n                rawQuery = withFilters(query.tags.map(function (t) {\n                  return \"\".concat(t.key, \"='\").concat(t.value, \"'\");\n                }).join(\" AND \"));\n                _context8.next = 34;\n                return this.txsQuery(rawQuery);\n\n              case 34:\n                txs = _context8.sent;\n                _context8.next = 38;\n                break;\n\n              case 37:\n                throw new Error(\"Unknown query type\");\n\n              case 38:\n                filtered = txs.filter(function (tx) {\n                  return tx.height >= minHeight && tx.height <= maxHeight;\n                });\n                return _context8.abrupt(\"return\", filtered);\n\n              case 40:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function searchTx(_x7) {\n        return _searchTx.apply(this, arguments);\n      }\n\n      return searchTx;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.tmClient) this.tmClient.disconnect();\n    }\n    /**\n     * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n     *\n     * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n     * an error is thrown.\n     *\n     * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n     *\n     * If the transaction is included in a block, a `BroadcastTxResponse` is returned. The caller then\n     * usually needs to check for execution success or failure.\n     */\n    // NOTE: This method is tested against slow chains and timeouts in the @cosmjs/stargate package.\n    // Make sure it is kept in sync!\n\n  }, {\n    key: \"broadcastTx\",\n    value: function () {\n      var _broadcastTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(tx) {\n        var _this2 = this;\n\n        var timeoutMs,\n            pollIntervalMs,\n            timedOut,\n            txPollTimeout,\n            pollForTx,\n            broadcasted,\n            transactionId,\n            _args10 = arguments;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                timeoutMs = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : 60000;\n                pollIntervalMs = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : 3000;\n                timedOut = false;\n                txPollTimeout = setTimeout(function () {\n                  timedOut = true;\n                }, timeoutMs);\n\n                pollForTx = /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(txId) {\n                    var result;\n                    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                      while (1) {\n                        switch (_context9.prev = _context9.next) {\n                          case 0:\n                            if (!timedOut) {\n                              _context9.next = 2;\n                              break;\n                            }\n\n                            throw new stargate_1.TimeoutError(\"Transaction with ID \".concat(txId, \" was submitted but was not yet found on the chain. You might want to check later.\"), txId);\n\n                          case 2:\n                            _context9.next = 4;\n                            return utils_1.sleep(pollIntervalMs);\n\n                          case 4:\n                            _context9.next = 6;\n                            return _this2.getTx(txId);\n\n                          case 6:\n                            result = _context9.sent;\n                            return _context9.abrupt(\"return\", result ? {\n                              code: result.code,\n                              height: result.height,\n                              rawLog: result.rawLog,\n                              transactionHash: txId,\n                              gasUsed: result.gasUsed,\n                              gasWanted: result.gasWanted\n                            } : pollForTx(txId));\n\n                          case 8:\n                          case \"end\":\n                            return _context9.stop();\n                        }\n                      }\n                    }, _callee9);\n                  }));\n\n                  return function pollForTx(_x9) {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                _context10.next = 7;\n                return this.forceGetTmClient().broadcastTxSync({\n                  tx: tx\n                });\n\n              case 7:\n                broadcasted = _context10.sent;\n\n                if (!broadcasted.code) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                throw new Error(\"Broadcasting transaction failed with code \".concat(broadcasted.code, \" (codespace: \").concat(broadcasted.codeSpace, \"). Log: \").concat(broadcasted.log));\n\n              case 10:\n                transactionId = encoding_1.toHex(broadcasted.hash).toUpperCase();\n                return _context10.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  return pollForTx(transactionId).then(function (value) {\n                    clearTimeout(txPollTimeout);\n                    resolve(value);\n                  }, function (error) {\n                    clearTimeout(txPollTimeout);\n                    reject(error);\n                  });\n                }));\n\n              case 12:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function broadcastTx(_x8) {\n        return _broadcastTx.apply(this, arguments);\n      }\n\n      return broadcastTx;\n    }()\n  }, {\n    key: \"getCodes\",\n    value: function () {\n      var _getCodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var _yield$this$forceGetQ, codeInfos;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.forceGetQueryClient().wasm.listCodeInfo();\n\n              case 2:\n                _yield$this$forceGetQ = _context11.sent;\n                codeInfos = _yield$this$forceGetQ.codeInfos;\n                return _context11.abrupt(\"return\", (codeInfos || []).map(function (entry) {\n                  utils_1.assert(entry.creator && entry.codeId && entry.dataHash, \"entry incomplete\");\n                  return {\n                    id: entry.codeId.toNumber(),\n                    creator: entry.creator,\n                    checksum: encoding_1.toHex(entry.dataHash),\n                    source: entry.source || undefined,\n                    builder: entry.builder || undefined\n                  };\n                }));\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getCodes() {\n        return _getCodes.apply(this, arguments);\n      }\n\n      return getCodes;\n    }()\n  }, {\n    key: \"getCodeDetails\",\n    value: function () {\n      var _getCodeDetails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(codeId) {\n        var cached, _yield$this$forceGetQ2, codeInfo, data, codeDetails;\n\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                cached = this.codesCache.get(codeId);\n\n                if (!cached) {\n                  _context12.next = 3;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\", cached);\n\n              case 3:\n                _context12.next = 5;\n                return this.forceGetQueryClient().wasm.getCode(codeId);\n\n              case 5:\n                _yield$this$forceGetQ2 = _context12.sent;\n                codeInfo = _yield$this$forceGetQ2.codeInfo;\n                data = _yield$this$forceGetQ2.data;\n                utils_1.assert(codeInfo && codeInfo.codeId && codeInfo.creator && codeInfo.dataHash && data, \"codeInfo missing or incomplete\");\n                codeDetails = {\n                  id: codeInfo.codeId.toNumber(),\n                  creator: codeInfo.creator,\n                  checksum: encoding_1.toHex(codeInfo.dataHash),\n                  source: codeInfo.source || undefined,\n                  builder: codeInfo.builder || undefined,\n                  data: data\n                };\n                this.codesCache.set(codeId, codeDetails);\n                return _context12.abrupt(\"return\", codeDetails);\n\n              case 12:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getCodeDetails(_x10) {\n        return _getCodeDetails.apply(this, arguments);\n      }\n\n      return getCodeDetails;\n    }()\n  }, {\n    key: \"getContracts\",\n    value: function () {\n      var _getContracts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(codeId) {\n        var _yield$this$forceGetQ3, contracts;\n\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.forceGetQueryClient().wasm.listContractsByCodeId(codeId);\n\n              case 2:\n                _yield$this$forceGetQ3 = _context13.sent;\n                contracts = _yield$this$forceGetQ3.contracts;\n                return _context13.abrupt(\"return\", contracts);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getContracts(_x11) {\n        return _getContracts.apply(this, arguments);\n      }\n\n      return getContracts;\n    }()\n    /**\n     * Throws an error if no contract was found at the address\n     */\n\n  }, {\n    key: \"getContract\",\n    value: function () {\n      var _getContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(address) {\n        var _yield$this$forceGetQ4, retrievedAddress, contractInfo;\n\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.forceGetQueryClient().wasm.getContractInfo(address);\n\n              case 2:\n                _yield$this$forceGetQ4 = _context14.sent;\n                retrievedAddress = _yield$this$forceGetQ4.address;\n                contractInfo = _yield$this$forceGetQ4.contractInfo;\n\n                if (contractInfo) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                throw new Error(\"No contract found at address \\\"\".concat(address, \"\\\"\"));\n\n              case 7:\n                utils_1.assert(retrievedAddress, \"address missing\");\n                utils_1.assert(contractInfo.codeId && contractInfo.creator && contractInfo.label, \"contractInfo incomplete\");\n                return _context14.abrupt(\"return\", {\n                  address: retrievedAddress,\n                  codeId: contractInfo.codeId.toNumber(),\n                  creator: contractInfo.creator,\n                  admin: contractInfo.admin || undefined,\n                  label: contractInfo.label\n                });\n\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getContract(_x12) {\n        return _getContract.apply(this, arguments);\n      }\n\n      return getContract;\n    }()\n    /**\n     * Throws an error if no contract was found at the address\n     */\n\n  }, {\n    key: \"getContractCodeHistory\",\n    value: function () {\n      var _getContractCodeHistory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(address) {\n        var _operations;\n\n        var result, operations;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.forceGetQueryClient().wasm.getContractCodeHistory(address);\n\n              case 2:\n                result = _context15.sent;\n\n                if (result) {\n                  _context15.next = 5;\n                  break;\n                }\n\n                throw new Error(\"No contract history found for address \\\"\".concat(address, \"\\\"\"));\n\n              case 5:\n                operations = (_operations = {}, _defineProperty(_operations, types_1.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT, \"Init\"), _defineProperty(_operations, types_1.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS, \"Genesis\"), _defineProperty(_operations, types_1.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE, \"Migrate\"), _operations);\n                return _context15.abrupt(\"return\", (result.entries || []).map(function (entry) {\n                  utils_1.assert(entry.operation && entry.codeId && entry.msg);\n                  return {\n                    operation: operations[entry.operation],\n                    codeId: entry.codeId.toNumber(),\n                    msg: JSON.parse(encoding_1.fromAscii(entry.msg))\n                  };\n                }));\n\n              case 7:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getContractCodeHistory(_x13) {\n        return _getContractCodeHistory.apply(this, arguments);\n      }\n\n      return getContractCodeHistory;\n    }()\n    /**\n     * Returns the data at the key if present (raw contract dependent storage data)\n     * or null if no data at this key.\n     *\n     * Promise is rejected when contract does not exist.\n     */\n\n  }, {\n    key: \"queryContractRaw\",\n    value: function () {\n      var _queryContractRaw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(address, key) {\n        var _yield$this$forceGetQ5, data;\n\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getContract(address);\n\n              case 2:\n                _context16.next = 4;\n                return this.forceGetQueryClient().wasm.queryContractRaw(address, key);\n\n              case 4:\n                _yield$this$forceGetQ5 = _context16.sent;\n                data = _yield$this$forceGetQ5.data;\n                return _context16.abrupt(\"return\", data !== null && data !== void 0 ? data : null);\n\n              case 7:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function queryContractRaw(_x14, _x15) {\n        return _queryContractRaw.apply(this, arguments);\n      }\n\n      return queryContractRaw;\n    }()\n    /**\n     * Makes a smart query on the contract, returns the parsed JSON document.\n     *\n     * Promise is rejected when contract does not exist.\n     * Promise is rejected for invalid query format.\n     * Promise is rejected for invalid response format.\n     */\n\n  }, {\n    key: \"queryContractSmart\",\n    value: function () {\n      var _queryContractSmart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(address, queryMsg) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.prev = 0;\n                _context17.next = 3;\n                return this.forceGetQueryClient().wasm.queryContractSmart(address, queryMsg);\n\n              case 3:\n                return _context17.abrupt(\"return\", _context17.sent);\n\n              case 6:\n                _context17.prev = 6;\n                _context17.t0 = _context17[\"catch\"](0);\n\n                if (!(_context17.t0 instanceof Error)) {\n                  _context17.next = 16;\n                  break;\n                }\n\n                if (!_context17.t0.message.startsWith(\"not found: contract\")) {\n                  _context17.next = 13;\n                  break;\n                }\n\n                throw new Error(\"No contract found at address \\\"\".concat(address, \"\\\"\"));\n\n              case 13:\n                throw _context17.t0;\n\n              case 14:\n                _context17.next = 17;\n                break;\n\n              case 16:\n                throw _context17.t0;\n\n              case 17:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this, [[0, 6]]);\n      }));\n\n      function queryContractSmart(_x16, _x17) {\n        return _queryContractSmart.apply(this, arguments);\n      }\n\n      return queryContractSmart;\n    }()\n  }, {\n    key: \"txsQuery\",\n    value: function () {\n      var _txsQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(query) {\n        var results;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.forceGetTmClient().txSearchAll({\n                  query: query\n                });\n\n              case 2:\n                results = _context18.sent;\n                return _context18.abrupt(\"return\", results.txs.map(function (tx) {\n                  return {\n                    height: tx.height,\n                    hash: encoding_1.toHex(tx.hash).toUpperCase(),\n                    code: tx.result.code,\n                    rawLog: tx.result.log || \"\",\n                    tx: tx.tx,\n                    gasUsed: tx.result.gasUsed,\n                    gasWanted: tx.result.gasWanted\n                  };\n                }));\n\n              case 4:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function txsQuery(_x18) {\n        return _txsQuery.apply(this, arguments);\n      }\n\n      return txsQuery;\n    }()\n  }], [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(endpoint) {\n        var tmClient;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n\n              case 2:\n                tmClient = _context19.sent;\n                return _context19.abrupt(\"return\", new CosmWasmClient(tmClient));\n\n              case 4:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      function connect(_x19) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }]);\n\n  return CosmWasmClient;\n}();\n\nexports.CosmWasmClient = CosmWasmClient;","map":null,"metadata":{},"sourceType":"script"}