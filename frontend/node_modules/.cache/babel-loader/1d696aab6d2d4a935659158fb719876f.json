{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _toConsumableArray = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningCosmWasmClient = exports.defaultGasLimits = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar amino_1 = require(\"@cosmjs/amino\");\n\nvar cosmwasm_launchpad_1 = require(\"@cosmjs/cosmwasm-launchpad\");\n\nvar crypto_1 = require(\"@cosmjs/crypto\");\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar math_1 = require(\"@cosmjs/math\");\n\nvar proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nvar stargate_1 = require(\"@cosmjs/stargate\");\n\nvar tx_1 = require(\"@cosmjs/stargate/build/codec/cosmos/distribution/v1beta1/tx\");\n\nvar tx_2 = require(\"@cosmjs/stargate/build/codec/cosmos/staking/v1beta1/tx\");\n\nvar signing_1 = require(\"@cosmjs/stargate/build/codec/cosmos/tx/signing/v1beta1/signing\");\n\nvar tx_3 = require(\"@cosmjs/stargate/build/codec/cosmos/tx/v1beta1/tx\");\n\nvar tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nvar utils_1 = require(\"@cosmjs/utils\");\n\nvar long_1 = __importDefault(require(\"long\"));\n\nvar pako_1 = __importDefault(require(\"pako\"));\n\nvar aminotypes_1 = require(\"./aminotypes\");\n\nvar tx_4 = require(\"./codec/cosmwasm/wasm/v1beta1/tx\");\n\nvar cosmwasmclient_1 = require(\"./cosmwasmclient\");\n\nfunction prepareBuilder(builder) {\n  if (builder === undefined) {\n    return \"\"; // normalization needed by backend\n  } else {\n    if (!cosmwasm_launchpad_1.isValidBuilder(builder)) throw new Error(\"The builder (Docker Hub image with tag) is not valid\");\n    return builder;\n  }\n}\n\nexports.defaultGasLimits = Object.assign(Object.assign({}, stargate_1.defaultGasLimits), {\n  upload: 1500000,\n  init: 500000,\n  migrate: 200000,\n  exec: 200000,\n  changeAdmin: 80000\n});\n\nfunction createBroadcastTxErrorMessage(result) {\n  return \"Error when broadcasting tx \".concat(result.transactionHash, \" at height \").concat(result.height, \". Code: \").concat(result.code, \"; Raw log: \").concat(result.rawLog);\n}\n\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry([].concat(_toConsumableArray(stargate_1.defaultRegistryTypes), [[\"/cosmwasm.wasm.v1beta1.MsgClearAdmin\", tx_4.MsgClearAdmin], [\"/cosmwasm.wasm.v1beta1.MsgExecuteContract\", tx_4.MsgExecuteContract], [\"/cosmwasm.wasm.v1beta1.MsgMigrateContract\", tx_4.MsgMigrateContract], [\"/cosmwasm.wasm.v1beta1.MsgStoreCode\", tx_4.MsgStoreCode], [\"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\", tx_4.MsgInstantiateContract], [\"/cosmwasm.wasm.v1beta1.MsgUpdateAdmin\", tx_4.MsgUpdateAdmin]]));\n}\n\nvar SigningCosmWasmClient = /*#__PURE__*/function (_cosmwasmclient_1$Cos) {\n  _inherits(SigningCosmWasmClient, _cosmwasmclient_1$Cos);\n\n  var _super = _createSuper(SigningCosmWasmClient);\n\n  function SigningCosmWasmClient(tmClient, signer, options) {\n    var _this;\n\n    _classCallCheck(this, SigningCosmWasmClient);\n\n    _this = _super.call(this, tmClient);\n    var _options$registry = options.registry,\n        registry = _options$registry === void 0 ? createDefaultRegistry() : _options$registry,\n        _options$aminoTypes = options.aminoTypes,\n        aminoTypes = _options$aminoTypes === void 0 ? new stargate_1.AminoTypes({\n      additions: aminotypes_1.cosmWasmTypes,\n      prefix: options.prefix\n    }) : _options$aminoTypes,\n        _options$gasPrice = options.gasPrice,\n        gasPrice = _options$gasPrice === void 0 ? stargate_1.defaultGasPrice : _options$gasPrice,\n        _options$gasLimits = options.gasLimits,\n        gasLimits = _options$gasLimits === void 0 ? {} : _options$gasLimits;\n    _this.fees = stargate_1.buildFeeTable(gasPrice, exports.defaultGasLimits, gasLimits);\n    _this.registry = registry;\n    _this.aminoTypes = aminoTypes;\n    _this.signer = signer;\n    _this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    _this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    return _this;\n  }\n\n  _createClass(SigningCosmWasmClient, [{\n    key: \"upload\",\n    value:\n    /** Uploads code and returns a receipt, including the code ID */\n    function () {\n      var _upload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(senderAddress, wasmCode) {\n        var meta,\n            memo,\n            source,\n            builder,\n            compressed,\n            storeCodeMsg,\n            result,\n            parsedLogs,\n            codeIdAttr,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                meta = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                memo = _args.length > 3 && _args[3] !== undefined ? _args[3] : \"\";\n                source = meta.source || \"\";\n                builder = prepareBuilder(meta.builder);\n                compressed = pako_1.default.gzip(wasmCode, {\n                  level: 9\n                });\n                storeCodeMsg = {\n                  typeUrl: \"/cosmwasm.wasm.v1beta1.MsgStoreCode\",\n                  value: tx_4.MsgStoreCode.fromPartial({\n                    sender: senderAddress,\n                    wasmByteCode: compressed,\n                    source: source,\n                    builder: builder\n                  })\n                };\n                _context.next = 8;\n                return this.signAndBroadcast(senderAddress, [storeCodeMsg], this.fees.upload, memo);\n\n              case 8:\n                result = _context.sent;\n\n                if (!stargate_1.isBroadcastTxFailure(result)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 11:\n                parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n                codeIdAttr = stargate_1.logs.findAttribute(parsedLogs, \"message\", \"code_id\");\n                return _context.abrupt(\"return\", {\n                  originalSize: wasmCode.length,\n                  originalChecksum: encoding_1.toHex(crypto_1.sha256(wasmCode)),\n                  compressedSize: compressed.length,\n                  compressedChecksum: encoding_1.toHex(crypto_1.sha256(compressed)),\n                  codeId: Number.parseInt(codeIdAttr.value, 10),\n                  logs: parsedLogs,\n                  transactionHash: result.transactionHash\n                });\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function upload(_x, _x2) {\n        return _upload.apply(this, arguments);\n      }\n\n      return upload;\n    }()\n  }, {\n    key: \"instantiate\",\n    value: function () {\n      var _instantiate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(senderAddress, codeId, msg, label) {\n        var options,\n            instantiateContractMsg,\n            result,\n            parsedLogs,\n            contractAddressAttr,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : {};\n                instantiateContractMsg = {\n                  typeUrl: \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\",\n                  value: tx_4.MsgInstantiateContract.fromPartial({\n                    sender: senderAddress,\n                    codeId: long_1.default.fromString(new math_1.Uint53(codeId).toString()),\n                    label: label,\n                    initMsg: encoding_1.toUtf8(JSON.stringify(msg)),\n                    funds: _toConsumableArray(options.transferAmount || []),\n                    admin: options.admin\n                  })\n                };\n                _context2.next = 4;\n                return this.signAndBroadcast(senderAddress, [instantiateContractMsg], this.fees.init, options.memo);\n\n              case 4:\n                result = _context2.sent;\n\n                if (!stargate_1.isBroadcastTxFailure(result)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 7:\n                parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n                contractAddressAttr = stargate_1.logs.findAttribute(parsedLogs, \"message\", \"contract_address\");\n                return _context2.abrupt(\"return\", {\n                  contractAddress: contractAddressAttr.value,\n                  logs: parsedLogs,\n                  transactionHash: result.transactionHash\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function instantiate(_x3, _x4, _x5, _x6) {\n        return _instantiate.apply(this, arguments);\n      }\n\n      return instantiate;\n    }()\n  }, {\n    key: \"updateAdmin\",\n    value: function () {\n      var _updateAdmin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(senderAddress, contractAddress, newAdmin) {\n        var memo,\n            updateAdminMsg,\n            result,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                memo = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : \"\";\n                updateAdminMsg = {\n                  typeUrl: \"/cosmwasm.wasm.v1beta1.MsgUpdateAdmin\",\n                  value: tx_4.MsgUpdateAdmin.fromPartial({\n                    sender: senderAddress,\n                    contract: contractAddress,\n                    newAdmin: newAdmin\n                  })\n                };\n                _context3.next = 4;\n                return this.signAndBroadcast(senderAddress, [updateAdminMsg], this.fees.changeAdmin, memo);\n\n              case 4:\n                result = _context3.sent;\n\n                if (!stargate_1.isBroadcastTxFailure(result)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 7:\n                return _context3.abrupt(\"return\", {\n                  logs: stargate_1.logs.parseRawLog(result.rawLog),\n                  transactionHash: result.transactionHash\n                });\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateAdmin(_x7, _x8, _x9) {\n        return _updateAdmin.apply(this, arguments);\n      }\n\n      return updateAdmin;\n    }()\n  }, {\n    key: \"clearAdmin\",\n    value: function () {\n      var _clearAdmin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(senderAddress, contractAddress) {\n        var memo,\n            clearAdminMsg,\n            result,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                memo = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : \"\";\n                clearAdminMsg = {\n                  typeUrl: \"/cosmwasm.wasm.v1beta1.MsgClearAdmin\",\n                  value: tx_4.MsgClearAdmin.fromPartial({\n                    sender: senderAddress,\n                    contract: contractAddress\n                  })\n                };\n                _context4.next = 4;\n                return this.signAndBroadcast(senderAddress, [clearAdminMsg], this.fees.changeAdmin, memo);\n\n              case 4:\n                result = _context4.sent;\n\n                if (!stargate_1.isBroadcastTxFailure(result)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 7:\n                return _context4.abrupt(\"return\", {\n                  logs: stargate_1.logs.parseRawLog(result.rawLog),\n                  transactionHash: result.transactionHash\n                });\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function clearAdmin(_x10, _x11) {\n        return _clearAdmin.apply(this, arguments);\n      }\n\n      return clearAdmin;\n    }()\n  }, {\n    key: \"migrate\",\n    value: function () {\n      var _migrate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(senderAddress, contractAddress, codeId, migrateMsg) {\n        var memo,\n            migrateContractMsg,\n            result,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                memo = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : \"\";\n                migrateContractMsg = {\n                  typeUrl: \"/cosmwasm.wasm.v1beta1.MsgMigrateContract\",\n                  value: tx_4.MsgMigrateContract.fromPartial({\n                    sender: senderAddress,\n                    contract: contractAddress,\n                    codeId: long_1.default.fromString(new math_1.Uint53(codeId).toString()),\n                    migrateMsg: encoding_1.toUtf8(JSON.stringify(migrateMsg))\n                  })\n                };\n                _context5.next = 4;\n                return this.signAndBroadcast(senderAddress, [migrateContractMsg], this.fees.migrate, memo);\n\n              case 4:\n                result = _context5.sent;\n\n                if (!stargate_1.isBroadcastTxFailure(result)) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 7:\n                return _context5.abrupt(\"return\", {\n                  logs: stargate_1.logs.parseRawLog(result.rawLog),\n                  transactionHash: result.transactionHash\n                });\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function migrate(_x12, _x13, _x14, _x15) {\n        return _migrate.apply(this, arguments);\n      }\n\n      return migrate;\n    }()\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(senderAddress, contractAddress, msg) {\n        var memo,\n            funds,\n            executeContractMsg,\n            result,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                memo = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : \"\";\n                funds = _args6.length > 4 ? _args6[4] : undefined;\n                executeContractMsg = {\n                  typeUrl: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\",\n                  value: tx_4.MsgExecuteContract.fromPartial({\n                    sender: senderAddress,\n                    contract: contractAddress,\n                    msg: encoding_1.toUtf8(JSON.stringify(msg)),\n                    funds: _toConsumableArray(funds || [])\n                  })\n                };\n                _context6.next = 5;\n                return this.signAndBroadcast(senderAddress, [executeContractMsg], this.fees.exec, memo);\n\n              case 5:\n                result = _context6.sent;\n\n                if (!stargate_1.isBroadcastTxFailure(result)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 8:\n                return _context6.abrupt(\"return\", {\n                  logs: stargate_1.logs.parseRawLog(result.rawLog),\n                  transactionHash: result.transactionHash\n                });\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function execute(_x16, _x17, _x18) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"sendTokens\",\n    value: function () {\n      var _sendTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(senderAddress, recipientAddress, amount) {\n        var memo,\n            sendMsg,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                memo = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : \"\";\n                sendMsg = {\n                  typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n                  value: {\n                    fromAddress: senderAddress,\n                    toAddress: recipientAddress,\n                    amount: _toConsumableArray(amount)\n                  }\n                };\n                return _context7.abrupt(\"return\", this.signAndBroadcast(senderAddress, [sendMsg], this.fees.send, memo));\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function sendTokens(_x19, _x20, _x21) {\n        return _sendTokens.apply(this, arguments);\n      }\n\n      return sendTokens;\n    }()\n  }, {\n    key: \"delegateTokens\",\n    value: function () {\n      var _delegateTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(delegatorAddress, validatorAddress, amount) {\n        var memo,\n            delegateMsg,\n            _args8 = arguments;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                memo = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : \"\";\n                delegateMsg = {\n                  typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n                  value: tx_2.MsgDelegate.fromPartial({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress,\n                    amount: amount\n                  })\n                };\n                return _context8.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [delegateMsg], this.fees.delegate, memo));\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function delegateTokens(_x22, _x23, _x24) {\n        return _delegateTokens.apply(this, arguments);\n      }\n\n      return delegateTokens;\n    }()\n  }, {\n    key: \"undelegateTokens\",\n    value: function () {\n      var _undelegateTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(delegatorAddress, validatorAddress, amount) {\n        var memo,\n            undelegateMsg,\n            _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                memo = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : \"\";\n                undelegateMsg = {\n                  typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n                  value: tx_2.MsgUndelegate.fromPartial({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress,\n                    amount: amount\n                  })\n                };\n                return _context9.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [undelegateMsg], this.fees.undelegate, memo));\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function undelegateTokens(_x25, _x26, _x27) {\n        return _undelegateTokens.apply(this, arguments);\n      }\n\n      return undelegateTokens;\n    }()\n  }, {\n    key: \"withdrawRewards\",\n    value: function () {\n      var _withdrawRewards = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(delegatorAddress, validatorAddress) {\n        var memo,\n            withdrawDelegatorRewardMsg,\n            _args10 = arguments;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                memo = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : \"\";\n                withdrawDelegatorRewardMsg = {\n                  typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n                  value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress\n                  })\n                };\n                return _context10.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [withdrawDelegatorRewardMsg], this.fees.withdraw, memo));\n\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function withdrawRewards(_x28, _x29) {\n        return _withdrawRewards.apply(this, arguments);\n      }\n\n      return withdrawRewards;\n    }()\n    /**\n     * Creates a transaction with the given messages, fee and memo. Then signs and broadcasts the transaction.\n     *\n     * @param signerAddress The address that will sign transactions using this instance. The signer must be able to sign with this address.\n     * @param messages\n     * @param fee\n     * @param memo\n     */\n\n  }, {\n    key: \"signAndBroadcast\",\n    value: function () {\n      var _signAndBroadcast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(signerAddress, messages, fee) {\n        var memo,\n            txRaw,\n            txBytes,\n            _args11 = arguments;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                memo = _args11.length > 3 && _args11[3] !== undefined ? _args11[3] : \"\";\n                _context11.next = 3;\n                return this.sign(signerAddress, messages, fee, memo);\n\n              case 3:\n                txRaw = _context11.sent;\n                txBytes = tx_3.TxRaw.encode(txRaw).finish();\n                return _context11.abrupt(\"return\", this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs));\n\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function signAndBroadcast(_x30, _x31, _x32) {\n        return _signAndBroadcast.apply(this, arguments);\n      }\n\n      return signAndBroadcast;\n    }()\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(signerAddress, messages, fee, memo, explicitSignerData) {\n        var signerData, _yield$this$getSequen, accountNumber, sequence, chainId;\n\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!explicitSignerData) {\n                  _context12.next = 4;\n                  break;\n                }\n\n                signerData = explicitSignerData;\n                _context12.next = 13;\n                break;\n\n              case 4:\n                _context12.next = 6;\n                return this.getSequence(signerAddress);\n\n              case 6:\n                _yield$this$getSequen = _context12.sent;\n                accountNumber = _yield$this$getSequen.accountNumber;\n                sequence = _yield$this$getSequen.sequence;\n                _context12.next = 11;\n                return this.getChainId();\n\n              case 11:\n                chainId = _context12.sent;\n                signerData = {\n                  accountNumber: accountNumber,\n                  sequence: sequence,\n                  chainId: chainId\n                };\n\n              case 13:\n                return _context12.abrupt(\"return\", proto_signing_1.isOfflineDirectSigner(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData));\n\n              case 14:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function sign(_x33, _x34, _x35, _x36, _x37) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"signAmino\",\n    value: function () {\n      var _signAmino = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(signerAddress, messages, fee, memo, _ref) {\n        var _this2 = this;\n\n        var accountNumber, sequence, chainId, accountFromSigner, pubkey, signMode, msgs, signDoc, _yield$this$signer$si, signature, signed, signedTxBody, signedTxBodyBytes, signedGasLimit, signedSequence, signedAuthInfoBytes;\n\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                accountNumber = _ref.accountNumber, sequence = _ref.sequence, chainId = _ref.chainId;\n                utils_1.assert(!proto_signing_1.isOfflineDirectSigner(this.signer));\n                _context13.next = 4;\n                return this.signer.getAccounts();\n\n              case 4:\n                accountFromSigner = _context13.sent.find(function (account) {\n                  return account.address === signerAddress;\n                });\n\n                if (accountFromSigner) {\n                  _context13.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Failed to retrieve account from signer\");\n\n              case 7:\n                pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n                signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n                msgs = messages.map(function (msg) {\n                  return _this2.aminoTypes.toAmino(msg);\n                });\n                signDoc = amino_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n                _context13.next = 13;\n                return this.signer.signAmino(signerAddress, signDoc);\n\n              case 13:\n                _yield$this$signer$si = _context13.sent;\n                signature = _yield$this$signer$si.signature;\n                signed = _yield$this$signer$si.signed;\n                signedTxBody = {\n                  typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n                  value: {\n                    messages: signed.msgs.map(function (msg) {\n                      return _this2.aminoTypes.fromAmino(msg);\n                    }),\n                    memo: signed.memo\n                  }\n                };\n                signedTxBodyBytes = this.registry.encode(signedTxBody);\n                signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n                signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n                signedAuthInfoBytes = proto_signing_1.makeAuthInfoBytes([pubkey], signed.fee.amount, signedGasLimit, signedSequence, signMode);\n                return _context13.abrupt(\"return\", tx_3.TxRaw.fromPartial({\n                  bodyBytes: signedTxBodyBytes,\n                  authInfoBytes: signedAuthInfoBytes,\n                  signatures: [encoding_1.fromBase64(signature.signature)]\n                }));\n\n              case 22:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function signAmino(_x38, _x39, _x40, _x41, _x42) {\n        return _signAmino.apply(this, arguments);\n      }\n\n      return signAmino;\n    }()\n  }, {\n    key: \"signDirect\",\n    value: function () {\n      var _signDirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(signerAddress, messages, fee, memo, _ref2) {\n        var accountNumber, sequence, chainId, accountFromSigner, pubkey, txBody, txBodyBytes, gasLimit, authInfoBytes, signDoc, _yield$this$signer$si2, signature, signed;\n\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                accountNumber = _ref2.accountNumber, sequence = _ref2.sequence, chainId = _ref2.chainId;\n                utils_1.assert(proto_signing_1.isOfflineDirectSigner(this.signer));\n                _context14.next = 4;\n                return this.signer.getAccounts();\n\n              case 4:\n                accountFromSigner = _context14.sent.find(function (account) {\n                  return account.address === signerAddress;\n                });\n\n                if (accountFromSigner) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Failed to retrieve account from signer\");\n\n              case 7:\n                pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n                txBody = {\n                  typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n                  value: {\n                    messages: messages,\n                    memo: memo\n                  }\n                };\n                txBodyBytes = this.registry.encode(txBody);\n                gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n                authInfoBytes = proto_signing_1.makeAuthInfoBytes([pubkey], fee.amount, gasLimit, sequence);\n                signDoc = proto_signing_1.makeSignDoc(txBodyBytes, authInfoBytes, chainId, accountNumber);\n                _context14.next = 15;\n                return this.signer.signDirect(signerAddress, signDoc);\n\n              case 15:\n                _yield$this$signer$si2 = _context14.sent;\n                signature = _yield$this$signer$si2.signature;\n                signed = _yield$this$signer$si2.signed;\n                return _context14.abrupt(\"return\", tx_3.TxRaw.fromPartial({\n                  bodyBytes: signed.bodyBytes,\n                  authInfoBytes: signed.authInfoBytes,\n                  signatures: [encoding_1.fromBase64(signature.signature)]\n                }));\n\n              case 19:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function signDirect(_x43, _x44, _x45, _x46, _x47) {\n        return _signDirect.apply(this, arguments);\n      }\n\n      return signDirect;\n    }()\n  }], [{\n    key: \"connectWithSigner\",\n    value: function () {\n      var _connectWithSigner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(endpoint, signer) {\n        var options,\n            tmClient,\n            _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};\n                _context15.next = 3;\n                return tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n\n              case 3:\n                tmClient = _context15.sent;\n                return _context15.abrupt(\"return\", new SigningCosmWasmClient(tmClient, signer, options));\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15);\n      }));\n\n      function connectWithSigner(_x48, _x49) {\n        return _connectWithSigner.apply(this, arguments);\n      }\n\n      return connectWithSigner;\n    }()\n    /**\n     * Creates a client in offline mode.\n     *\n     * This should only be used in niche cases where you know exactly what you're doing,\n     * e.g. when building an offline signing application.\n     *\n     * When you try to use online functionality with such a signer, an\n     * exception will be raised.\n     */\n\n  }, {\n    key: \"offline\",\n    value: function () {\n      var _offline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(signer) {\n        var options,\n            _args16 = arguments;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                options = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {};\n                return _context16.abrupt(\"return\", new SigningCosmWasmClient(undefined, signer, options));\n\n              case 2:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16);\n      }));\n\n      function offline(_x50) {\n        return _offline.apply(this, arguments);\n      }\n\n      return offline;\n    }()\n  }]);\n\n  return SigningCosmWasmClient;\n}(cosmwasmclient_1.CosmWasmClient);\n\nexports.SigningCosmWasmClient = SigningCosmWasmClient;","map":null,"metadata":{},"sourceType":"script"}