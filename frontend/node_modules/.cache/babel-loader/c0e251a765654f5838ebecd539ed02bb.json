{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupWasmExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar launchpad_1 = require(\"@cosmjs/launchpad\");\n\nvar types_1 = require(\"../types\");\n\nfunction isWasmError(resp) {\n  return resp.error !== undefined;\n}\n\nfunction unwrapWasmResponse(response) {\n  if (isWasmError(response)) {\n    throw new Error(response.error);\n  }\n\n  return response.result;\n}\n\nfunction setupWasmExtension(base) {\n  return {\n    wasm: {\n      listCodeInfo: function () {\n        var _listCodeInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var path, responseData;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  path = \"/wasm/code\";\n                  _context.next = 3;\n                  return base.get(path);\n\n                case 3:\n                  responseData = _context.sent;\n                  return _context.abrupt(\"return\", launchpad_1.normalizeLcdApiArray(unwrapWasmResponse(responseData)));\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function listCodeInfo() {\n          return _listCodeInfo.apply(this, arguments);\n        }\n\n        return listCodeInfo;\n      }(),\n      getCode: function () {\n        var _getCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n          var path, responseData;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  path = \"/wasm/code/\".concat(id);\n                  _context2.next = 3;\n                  return base.get(path);\n\n                case 3:\n                  responseData = _context2.sent;\n                  return _context2.abrupt(\"return\", unwrapWasmResponse(responseData));\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function getCode(_x) {\n          return _getCode.apply(this, arguments);\n        }\n\n        return getCode;\n      }(),\n      listContractsByCodeId: function () {\n        var _listContractsByCodeId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n          var path, responseData;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  path = \"/wasm/code/\".concat(id, \"/contracts\");\n                  _context3.next = 3;\n                  return base.get(path);\n\n                case 3:\n                  responseData = _context3.sent;\n                  return _context3.abrupt(\"return\", launchpad_1.normalizeLcdApiArray(unwrapWasmResponse(responseData)));\n\n                case 5:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        function listContractsByCodeId(_x2) {\n          return _listContractsByCodeId.apply(this, arguments);\n        }\n\n        return listContractsByCodeId;\n      }(),\n      getContractInfo: function () {\n        var _getContractInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(address) {\n          var path, response;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  path = \"/wasm/contract/\".concat(address);\n                  _context4.next = 3;\n                  return base.get(path);\n\n                case 3:\n                  response = _context4.sent;\n                  return _context4.abrupt(\"return\", unwrapWasmResponse(response));\n\n                case 5:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        function getContractInfo(_x3) {\n          return _getContractInfo.apply(this, arguments);\n        }\n\n        return getContractInfo;\n      }(),\n      getContractCodeHistory: function () {\n        var _getContractCodeHistory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(address) {\n          var path, response;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  path = \"/wasm/contract/\".concat(address, \"/history\");\n                  _context5.next = 3;\n                  return base.get(path);\n\n                case 3:\n                  response = _context5.sent;\n                  return _context5.abrupt(\"return\", unwrapWasmResponse(response));\n\n                case 5:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        function getContractCodeHistory(_x4) {\n          return _getContractCodeHistory.apply(this, arguments);\n        }\n\n        return getContractCodeHistory;\n      }(),\n      getAllContractState: function () {\n        var _getAllContractState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(address) {\n          var path, responseData;\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  path = \"/wasm/contract/\".concat(address, \"/state\");\n                  _context6.next = 3;\n                  return base.get(path);\n\n                case 3:\n                  responseData = _context6.sent;\n                  return _context6.abrupt(\"return\", launchpad_1.normalizeLcdApiArray(unwrapWasmResponse(responseData)).map(types_1.parseWasmData));\n\n                case 5:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n\n        function getAllContractState(_x5) {\n          return _getAllContractState.apply(this, arguments);\n        }\n\n        return getAllContractState;\n      }(),\n      queryContractRaw: function () {\n        var _queryContractRaw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(address, key) {\n          var hexKey, path, responseData, data;\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  hexKey = encoding_1.toHex(key);\n                  path = \"/wasm/contract/\".concat(address, \"/raw/\").concat(hexKey, \"?encoding=hex\");\n                  _context7.next = 4;\n                  return base.get(path);\n\n                case 4:\n                  responseData = _context7.sent;\n                  data = unwrapWasmResponse(responseData);\n\n                  if (!Array.isArray(data)) {\n                    _context7.next = 10;\n                    break;\n                  }\n\n                  return _context7.abrupt(\"return\", data.length === 0 ? null : encoding_1.fromBase64(data[0].val));\n\n                case 10:\n                  return _context7.abrupt(\"return\", !data ? null : encoding_1.fromBase64(data));\n\n                case 11:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        function queryContractRaw(_x6, _x7) {\n          return _queryContractRaw.apply(this, arguments);\n        }\n\n        return queryContractRaw;\n      }(),\n      queryContractSmart: function () {\n        var _queryContractSmart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(address, query) {\n          var encoded, path, responseData, result;\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  encoded = encoding_1.toHex(encoding_1.toUtf8(JSON.stringify(query)));\n                  path = \"/wasm/contract/\".concat(address, \"/smart/\").concat(encoded, \"?encoding=hex\");\n                  _context8.next = 4;\n                  return base.get(path);\n\n                case 4:\n                  responseData = _context8.sent;\n                  result = unwrapWasmResponse(responseData); // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n\n                  return _context8.abrupt(\"return\", JSON.parse(encoding_1.fromUtf8(encoding_1.fromBase64(result.smart))));\n\n                case 7:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }));\n\n        function queryContractSmart(_x8, _x9) {\n          return _queryContractSmart.apply(this, arguments);\n        }\n\n        return queryContractSmart;\n      }()\n    }\n  };\n}\n\nexports.setupWasmExtension = setupWasmExtension;","map":null,"metadata":{},"sourceType":"script"}