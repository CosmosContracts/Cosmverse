{"ast":null,"code":"export const CW721 = contractAddress => {\n  const use = client => {\n    const ownerOf = async tokenId => {\n      const result = await client.queryContractSmart(contractAddress, {\n        owner_of: {\n          token_id: tokenId\n        }\n      });\n      return result.owner;\n    };\n\n    const numTokens = async () => {\n      const result = await client.queryContractSmart(contractAddress, {\n        num_tokens: {}\n      });\n      return result.count;\n    };\n\n    const nftInfo = async tokenId => {\n      const result = await client.queryContractSmart(contractAddress, {\n        nft_info: {\n          token_id: tokenId\n        }\n      });\n      return result;\n    };\n\n    const tokens = async (owner, startAfter, limit) => {\n      const result = await client.queryContractSmart(contractAddress, {\n        tokens: {\n          owner: owner,\n          start_after: startAfter,\n          limit: limit\n        }\n      });\n      return result;\n    };\n\n    const allTokens = async (startAfter, limit) => {\n      const result = await client.queryContractSmart(contractAddress, {\n        all_tokens: {\n          start_after: startAfter,\n          limit: limit\n        }\n      });\n      return result;\n    };\n\n    const minter = async () => {\n      const result = await client.queryContractSmart(contractAddress, {\n        minter: {}\n      });\n      return result.minter;\n    };\n\n    return {\n      contractAddress,\n      ownerOf,\n      numTokens,\n      nftInfo,\n      tokens,\n      allTokens,\n      minter\n    };\n  };\n\n  const useTx = client => {\n    const mint = async (sender, nft) => {\n      const result = await client.execute(sender, contractAddress, {\n        mint: nft\n      });\n      return result.transactionHash;\n    };\n\n    const transfer = async (sender, recipient, tokenId) => {\n      const result = await client.execute(sender, contractAddress, {\n        transfer_nft: {\n          recipient,\n          token_id: tokenId\n        }\n      });\n      return result.transactionHash;\n    };\n\n    const send = async (sender, contract, msg, tokenId) => {\n      const result = await client.execute(sender, contractAddress, {\n        send_nft: {\n          contract,\n          token_id: tokenId,\n          msg: btoa(JSON.stringify(msg))\n        }\n      });\n      return result.transactionHash;\n    };\n\n    return {\n      contractAddress,\n      mint,\n      transfer,\n      send\n    };\n  };\n\n  return {\n    use,\n    useTx\n  };\n};\n_c = CW721;\n\nvar _c;\n\n$RefreshReg$(_c, \"CW721\");","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/services/client/cw721.ts"],"names":["CW721","contractAddress","use","client","ownerOf","tokenId","result","queryContractSmart","owner_of","token_id","owner","numTokens","num_tokens","count","nftInfo","nft_info","tokens","startAfter","limit","start_after","allTokens","all_tokens","minter","useTx","mint","sender","nft","execute","transactionHash","transfer","recipient","transfer_nft","send","contract","msg","send_nft","btoa","JSON","stringify"],"mappings":"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","sourcesContent":["import { CosmWasmClient, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\n\nexport interface NftInfoResponse {\n  /**\n   * Describes the asset to which this NFT represents\n   */\n  description: string\n  /**\n   * \"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive. TODO: Use https://docs.rs/url_serde for type-safety\n   */\n  image: string\n  /**\n   * Identifies the asset to which this NFT represents\n   */\n  name: string\n}\n\nexport interface TokensResponse {\n  /**\n   * Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_from` in future queries to achieve pagination.\n   */\n  tokens: string[]\n}\n\n\nexport interface NftMsg {\n  /**\n   * Describes the asset to which this NFT represents (may be empty)\n   */\n  description?: string | null\n  /**\n   * A URI pointing to an image representing the asset\n   */\n  image: string\n  /**\n   * Identifies the asset to which this NFT represents\n   */\n  name: string\n  /**\n   * The owner of the newly minter NFT\n   */\n  owner: string\n  /**\n   * Unique ID of the NFT\n   */\n  token_id: string\n}\n\nexport interface CW721Instance {\n  readonly contractAddress: string;\n\n  /**\n   * @returns owner address\n   */\n  ownerOf: (tokenId: string) => Promise<string>;\n  numTokens: () => Promise<number>;\n  nftInfo: (tokenId: string) => Promise<NftInfoResponse>;\n  tokens: (owner: string, startAfter?: string, limit?: number) => Promise<TokensResponse>;\n  allTokens: (startAfter?: string, limit?: number) => Promise<TokensResponse>;\n  minter: () => Promise<any>;\n}\n\nexport interface CW721TxInstance {\n  readonly contractAddress: string;\n\n  // actions\n  mint: (sender: string, nft: NftMsg) => Promise<string>;\n  transfer: (sender: string, recipient: string, tokenId: string) => Promise<string>;\n  send: (sender: string, contract: string, msg: Record<string, unknown>, tokenId: string) => Promise<string>;\n}\n\n\nexport interface CW721Contract {\n  use: (client: CosmWasmClient) => CW721Instance;\n  useTx: (client: SigningCosmWasmClient) => CW721TxInstance;\n}\n\nexport const CW721 = (contractAddress: string): CW721Contract => {\n  const use = (client: CosmWasmClient): CW721Instance => {\n    const ownerOf = async (tokenId: string): Promise<string> => {\n      const result = await client.queryContractSmart(contractAddress, { owner_of: { token_id: tokenId } });\n      return result.owner;\n    };\n\n    const numTokens = async (): Promise<number> => {\n      const result = await client.queryContractSmart(contractAddress, { num_tokens: {} });\n      return result.count;\n    };\n\n    const nftInfo = async (tokenId: string): Promise<NftInfoResponse> => {\n      const result = await client.queryContractSmart(contractAddress, { nft_info: { token_id: tokenId } });\n      return result;\n    };\n\n    const tokens = async (owner: string, startAfter?: string, limit?: number): Promise<TokensResponse> => {\n      const result = await client.queryContractSmart(contractAddress, { tokens: { owner: owner, start_after: startAfter, limit: limit } });\n      return result;\n    };\n\n    const allTokens = async (startAfter?: string, limit?: number): Promise<TokensResponse> => {\n      const result = await client.queryContractSmart(contractAddress, { all_tokens: { start_after: startAfter, limit: limit } });\n      return result;\n    };\n\n    const minter = async (): Promise<any> => {\n      const result = await client.queryContractSmart(contractAddress, { minter: {} });\n      return result.minter;\n    };\n\n    return {\n      contractAddress,\n      ownerOf,\n      numTokens,\n      nftInfo,\n      tokens,\n      allTokens,\n      minter,\n    }\n  };\n\n  const useTx = (client: SigningCosmWasmClient): CW721TxInstance => {\n    const mint = async (sender: string, nft: NftMsg): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { mint: nft });\n      return result.transactionHash;\n    };\n\n    const transfer = async (sender: string, recipient: string, tokenId: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { transfer_nft: { recipient, token_id: tokenId } });\n      return result.transactionHash;\n    };\n\n    const send = async (sender: string, contract: string, msg: Record<string, unknown>, tokenId: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, {\n        send_nft: {\n          contract,\n          token_id: tokenId,\n          msg: btoa(JSON.stringify(msg))\n        }\n      });\n      return result.transactionHash;\n    };\n\n    return {\n      contractAddress,\n      mint,\n      transfer,\n      send\n    };\n  };\n\n  return { use, useTx };\n}\n"]},"metadata":{},"sourceType":"module"}