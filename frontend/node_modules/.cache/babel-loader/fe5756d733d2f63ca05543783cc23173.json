{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildFeeTable = exports.GasPrice = void 0;\n\nvar amino_1 = require(\"@cosmjs/amino\");\n\nvar math_1 = require(\"@cosmjs/math\");\n/**\n * Denom checker for the Cosmos SDK 0.39 denom pattern\n * (https://github.com/cosmos/cosmos-sdk/blob/v0.39.3/types/coin.go#L597-L598).\n *\n * This is like a regexp but with helpful error messages.\n */\n\n\nfunction checkDenom(denom) {\n  if (denom.length < 3 || denom.length > 16) {\n    throw new Error(\"Denom must be between 3 and 16 characters\");\n  }\n\n  if (denom.match(/[^a-z0-9]/)) {\n    throw new Error(\"Denom must only contain lower case letters a-z and digits 0-9\");\n  }\n}\n/**\n * A gas price, i.e. the price of a single unit of gas. This is typically a fraction of\n * the smallest fee token unit, such as 0.012utoken.\n */\n\n\nvar GasPrice = /*#__PURE__*/function () {\n  function GasPrice(amount, denom) {\n    _classCallCheck(this, GasPrice);\n\n    this.amount = amount;\n    this.denom = denom;\n  }\n  /**\n   * Parses a gas price formatted as `<amount><denom>`, e.g. `GasPrice.fromString(\"0.012utoken\")`.\n   *\n   * The denom must match the Cosmos SDK 0.39 pattern (https://github.com/cosmos/cosmos-sdk/blob/v0.39.3/types/coin.go#L597-L598).\n   * See `GasPrice` in @cosmjs/stargate for a more generic matcher.\n   */\n\n\n  _createClass(GasPrice, null, [{\n    key: \"fromString\",\n    value: function fromString(gasPrice) {\n      // Use Decimal.fromUserInput and checkDenom for detailed checks and helpful error messages\n      var matchResult = gasPrice.match(/^([0-9.]+)([a-z][a-z0-9]*)$/i);\n\n      if (!matchResult) {\n        throw new Error(\"Invalid gas price string\");\n      }\n\n      var _matchResult = _slicedToArray(matchResult, 3),\n          _ = _matchResult[0],\n          amount = _matchResult[1],\n          denom = _matchResult[2];\n\n      checkDenom(denom);\n      var fractionalDigits = 18;\n      var decimalAmount = math_1.Decimal.fromUserInput(amount, fractionalDigits);\n      return new GasPrice(decimalAmount, denom);\n    }\n  }]);\n\n  return GasPrice;\n}();\n\nexports.GasPrice = GasPrice;\n\nfunction calculateFee(gasLimit, _ref) {\n  var denom = _ref.denom,\n      gasPriceAmount = _ref.amount;\n  var amount = Math.ceil(gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).toFloatApproximation());\n  return {\n    amount: amino_1.coins(amount, denom),\n    gas: gasLimit.toString()\n  };\n}\n\nfunction buildFeeTable(gasPrice, defaultGasLimits, gasLimits) {\n  return Object.entries(defaultGasLimits).reduce(function (feeTable, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        type = _ref3[0],\n        defaultGasLimit = _ref3[1];\n\n    return Object.assign(Object.assign({}, feeTable), _defineProperty({}, type, calculateFee(gasLimits[type] || defaultGasLimit, gasPrice)));\n  }, {});\n}\n\nexports.buildFeeTable = buildFeeTable;","map":null,"metadata":{},"sourceType":"script"}