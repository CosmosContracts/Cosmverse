{"ast":null,"code":"var _jsxFileName = \"/Users/pauloponciano/Documents/cosmverse/src/App/components/Header/Account-button/index.tsx\",\n    _s2 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { Avatar, Badge, Box, Flex, Grid, GridItem, Popover, PopoverBody, PopoverContent, PopoverFooter, PopoverTrigger, Text, VStack, chakra, useBoolean, useColorModeValue, useDisclosure } from '@chakra-ui/react';\nimport { configKeplr, formatAddress, formatPrice, getTokenConfig, loadKeplrWallet } from \"../../../services\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\nimport cn from \"classnames\";\nimport { config } from \"../../../../config\";\nimport styles from \"../Header.module.sass\";\nimport { useSdk } from \"../../../services/client/wallet\";\nimport userLogo from \"../../../assets/user-default.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function AccountButton() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const sdk = useSdk();\n  const {\n    onOpen,\n    onClose,\n    isOpen\n  } = useDisclosure();\n  const [loading, setLoading] = useBoolean();\n\n  async function init(loadWallet) {\n    const signer = await loadWallet(config.chainId, config.addressPrefix);\n    sdk.init(signer);\n  }\n\n  async function connectKeplr() {\n    setLoading.on();\n    const anyWindow = window;\n\n    try {\n      var _anyWindow$keplr, _anyWindow$keplr2;\n\n      await ((_anyWindow$keplr = anyWindow.keplr) === null || _anyWindow$keplr === void 0 ? void 0 : _anyWindow$keplr.experimentalSuggestChain(configKeplr(config)));\n      await ((_anyWindow$keplr2 = anyWindow.keplr) === null || _anyWindow$keplr2 === void 0 ? void 0 : _anyWindow$keplr2.enable(config.chainId));\n      await init(loadKeplrWallet);\n    } catch (error) {\n      setLoading.off();\n      console.error(error);\n    }\n  }\n\n  const loginButton = /*#__PURE__*/_jsxDEV(ReactRouterLink, {\n    isLoading: loading,\n    loadingText: \"Connecting...\",\n    className: cn(\"button-stroke button-small\", styles.button),\n    onClick: connectKeplr,\n    children: \"Connect wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n\n  const MenuLink = props => {\n    _s();\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      p: 1,\n      rounded: 6,\n      _hover: {\n        bg: useColorModeValue('gray.500', 'cyan.900')\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactRouterLink, {\n        fontSize: 'md',\n        as: ReactRouterLink,\n        to: props.href,\n        onClick: onClose,\n        _hover: {\n          textDecoration: 'none'\n        },\n        children: props.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(MenuLink, \"3skuTHwppfEdh6aKNlffDjyTB8U=\", false, function () {\n    return [useColorModeValue];\n  });\n\n  const BalanceItem = props => {\n    const coin = getTokenConfig(props.coin.denom);\n    if (!coin) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      templateColumns: \"repeat(10, 1fr)\",\n      gap: 4,\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 2,\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          h: \"full\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            size: \"sm\",\n            name: coin.name,\n            src: coin.logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 8,\n        textAlign: \"left\",\n        children: [/*#__PURE__*/_jsxDEV(chakra.p, {\n          fontSize: \"xs\",\n          children: \"Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(chakra.p, {\n          fontWeight: \"semibold\",\n          children: formatPrice(props.coin)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  };\n\n  const accountBox = /*#__PURE__*/_jsxDEV(Popover, {\n    isOpen: isOpen,\n    placement: \"bottom-start\",\n    onOpen: onOpen,\n    onClose: onClose,\n    children: [/*#__PURE__*/_jsxDEV(PopoverTrigger, {\n      children: /*#__PURE__*/_jsxDEV(Avatar, {\n        cursor: \"pointer\",\n        size: \"sm\",\n        name: \"Juno\",\n        src: userLogo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PopoverContent, {\n      mt: \"0.5rem\",\n      maxW: \"sm\",\n      bg: useColorModeValue('white', 'gray.500'),\n      children: [/*#__PURE__*/_jsxDEV(PopoverBody, {\n        p: 0,\n        children: /*#__PURE__*/_jsxDEV(VStack, {\n          px: 8,\n          pt: 6,\n          pb: 3,\n          align: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Badge, {\n              fontSize: \"0.6rem\",\n              variant: \"outline\",\n              colorScheme: \"orange\",\n              children: \"Lucina Testnet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"md\",\n              fontWeight: \"semibold\",\n              children: formatAddress(sdk.address)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            py: 2,\n            children: sdk.balance.map(coin => /*#__PURE__*/_jsxDEV(BalanceItem, {\n              coin: coin\n            }, coin.denom, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PopoverFooter, {\n        p: 0,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          px: 8,\n          pb: 6,\n          pt: 3,\n          children: /*#__PURE__*/_jsxDEV(MenuLink, {\n            href: `/account/${sdk.address}`,\n            label: \"My Items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n\n  return sdk.address ? accountBox : loginButton;\n}\n\n_s2(AccountButton, \"g03yrfnouN1Vay9ogiKyO6LtJQo=\", false, function () {\n  return [useSdk, useDisclosure, useBoolean, useColorModeValue];\n});\n\n_c = AccountButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountButton\");","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/components/Header/Account-button/index.tsx"],"names":["React","Avatar","Badge","Box","Flex","Grid","GridItem","Popover","PopoverBody","PopoverContent","PopoverFooter","PopoverTrigger","Text","VStack","chakra","useBoolean","useColorModeValue","useDisclosure","configKeplr","formatAddress","formatPrice","getTokenConfig","loadKeplrWallet","Link","ReactRouterLink","cn","config","styles","useSdk","AccountButton","sdk","onOpen","onClose","isOpen","loading","setLoading","init","loadWallet","signer","chainId","addressPrefix","connectKeplr","on","anyWindow","window","keplr","experimentalSuggestChain","enable","error","off","console","loginButton","button","MenuLink","props","bg","href","textDecoration","label","BalanceItem","coin","denom","name","logo","accountBox","userLogo","address","balance","map"],"mappings":"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","sourcesContent":["import * as React from \"react\";\n\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Flex,\n  Grid,\n  GridItem,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverFooter,\n  PopoverTrigger,\n  Text,\n  VStack,\n  chakra,\n  useBoolean,\n  useColorModeValue,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  WalletLoader,\n  configKeplr,\n  formatAddress,\n  formatPrice,\n  getTokenConfig,\n  loadKeplrWallet,\n} from \"../../../services\";\n\nimport { Window as KeplrWindow } from \"@keplr-wallet/types\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\nimport cn from \"classnames\";\nimport { config } from \"../../../../config\";\nimport styles from \"../Header.module.sass\";\nimport { useSdk } from \"../../../services/client/wallet\";\nimport userLogo from \"../../../assets/user-default.svg\";\n\nexport function AccountButton(): JSX.Element {\n  const sdk = useSdk();\n  const { onOpen, onClose, isOpen } = useDisclosure()\n  const [loading, setLoading] = useBoolean();\n\n  async function init(loadWallet: WalletLoader) {\n    const signer = await loadWallet(config.chainId, config.addressPrefix);\n    sdk.init(signer);\n  }\n\n  async function connectKeplr() {\n    setLoading.on();\n    const anyWindow = window as KeplrWindow;\n    try {\n      await anyWindow.keplr?.experimentalSuggestChain(configKeplr(config));\n      await anyWindow.keplr?.enable(config.chainId);\n      await init(loadKeplrWallet);\n    } catch (error) {\n      setLoading.off();\n      console.error(error);\n    }\n  }\n\n  const loginButton = (\n    <ReactRouterLink\n      isLoading={loading}\n      loadingText=\"Connecting...\"\n      className={cn(\"button-stroke button-small\", styles.button)}\n      onClick={connectKeplr}\n    >\n      Connect wallet\n    </ReactRouterLink>\n  );\n\n  const MenuLink = (props: any) => {\n    return (\n      <Box\n        p={1}\n        rounded={6}\n        _hover={{\n          bg: useColorModeValue('gray.500', 'cyan.900'),\n        }}>\n        <ReactRouterLink\n          fontSize={'md'}\n          as={ReactRouterLink}\n          to={props.href}\n          onClick={onClose}\n          _hover={{\n            textDecoration: 'none',\n          }}>\n          {props.label}\n        </ReactRouterLink>\n      </Box>\n    );\n  };\n\n  const BalanceItem = (props: any) => {\n    const coin = getTokenConfig(props.coin.denom);\n\n    if (!coin) return (<></>);\n\n    return (\n      <Grid templateColumns=\"repeat(10, 1fr)\" gap={4}>\n        <GridItem colSpan={2}>\n          <Flex h=\"full\" justifyContent=\"center\" alignItems=\"center\">\n            <Avatar size=\"sm\" name={coin.name} src={coin.logo} />\n          </Flex>\n        </GridItem>\n        <GridItem colSpan={8} textAlign=\"left\">\n          <chakra.p\n            fontSize=\"xs\"\n          >Balance</chakra.p>\n          <chakra.p fontWeight=\"semibold\">\n            {formatPrice(props.coin)}\n          </chakra.p>\n        </GridItem>\n      </Grid>\n    );\n  };\n\n  const accountBox = (\n    <Popover\n      isOpen={isOpen}\n      placement=\"bottom-start\"\n      onOpen={onOpen}\n      onClose={onClose}>\n      <PopoverTrigger>\n        <Avatar cursor=\"pointer\" size=\"sm\" name=\"Juno\" src={userLogo} />\n      </PopoverTrigger>\n      <PopoverContent\n        mt=\"0.5rem\"\n        maxW=\"sm\"\n        bg={useColorModeValue('white', 'gray.500')}\n      >\n        <PopoverBody p={0}>\n          <VStack\n            px={8}\n            pt={6}\n            pb={3}\n            align=\"left\"\n          >\n            <Box>\n              <Badge fontSize=\"0.6rem\" variant=\"outline\" colorScheme=\"orange\">\n                Lucina Testnet\n              </Badge>\n              <Text fontSize=\"md\" fontWeight=\"semibold\">{formatAddress(sdk.address)}</Text>\n            </Box>\n            <Box py={2}>\n              {sdk.balance.map(coin => (\n                <BalanceItem key={coin.denom} coin={coin} />\n              ))}\n            </Box>\n          </VStack>\n        </PopoverBody>\n        <PopoverFooter p={0}>\n          <Box px={8} pb={6} pt={3}>\n            <MenuLink href={`/account/${sdk.address}`} label=\"My Items\" />\n          </Box>\n        </PopoverFooter>\n      </PopoverContent>\n    </Popover>\n  );\n\n  return sdk.address ? accountBox : loginButton;\n}\n"]},"metadata":{},"sourceType":"module"}