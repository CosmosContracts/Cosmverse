{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnglishMnemonic = void 0;\n\nvar bip39 = __importStar(require(\"bip39\"));\n\nvar EnglishMnemonic = /*#__PURE__*/function () {\n  function EnglishMnemonic(mnemonic) {\n    _classCallCheck(this, EnglishMnemonic);\n\n    if (!EnglishMnemonic.mnemonicMatcher.test(mnemonic)) {\n      throw new Error(\"Invalid mnemonic format\");\n    }\n\n    var words = mnemonic.split(\" \");\n    var allowedWordsLengths = [12, 15, 18, 21, 24];\n\n    if (allowedWordsLengths.indexOf(words.length) === -1) {\n      throw new Error(\"Invalid word count in mnemonic (allowed: \".concat(allowedWordsLengths, \" got: \").concat(words.length, \")\"));\n    }\n\n    var _iterator = _createForOfIteratorHelper(words),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var word = _step.value;\n\n        if (EnglishMnemonic.wordlist.indexOf(word) === -1) {\n          throw new Error(\"Mnemonic contains invalid word\");\n        }\n      } // Throws with informative error message if mnemonic is not valid\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    bip39.mnemonicToEntropy(mnemonic);\n    this.data = mnemonic;\n  }\n\n  _createClass(EnglishMnemonic, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.data;\n    }\n  }]);\n\n  return EnglishMnemonic;\n}();\n\nexports.EnglishMnemonic = EnglishMnemonic;\nEnglishMnemonic.wordlist = bip39.wordlists.english; // list of space separated lower case words (1 or more)\n\nEnglishMnemonic.mnemonicMatcher = /^[a-z]+( [a-z]+)*$/;","map":null,"metadata":{},"sourceType":"script"}