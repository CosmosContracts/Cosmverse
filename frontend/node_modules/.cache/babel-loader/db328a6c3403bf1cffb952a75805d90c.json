{"ast":null,"code":"var _jsxFileName = \"/Users/pauloponciano/Documents/cosmverse/src/App/oldFrontend/pages/account/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { Box, Flex, Image, LinkBox, LinkOverlay, SimpleGrid, Tab, TabList, TabPanel, TabPanels, Tabs, Text, VStack } from \"@chakra-ui/react\";\nimport { CW721, Market, formatPrice, publicIpfsUrl, useSdk } from \"../../../services\";\nimport { Link as ReactRouterLink, useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { NftCard } from \"../../../components\";\nimport { config } from \"../../../../config\";\nimport userLogo from \"../../assets/user-default.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst maxItemsPerPage = 15;\nexport const Account = () => {\n  _s();\n\n  const {\n    user\n  } = useParams();\n  const {\n    client,\n    address\n  } = useSdk();\n  const [nfts, setNfts] = useState([]);\n  const [nftSale, setNftSale] = useState([]);\n\n  const getNftsInfo = async (ids, contract) => {\n    const allNfts = [];\n    ids.forEach(tokenId => {\n      allNfts.push(contract.nftInfo(tokenId));\n    });\n    const tokens = await Promise.all(allNfts);\n    return tokens.map((nft, idx) => {\n      return {\n        tokenId: ids[idx],\n        user: 'unknown',\n        title: nft.name,\n        price: 'Not listed',\n        image: publicIpfsUrl(nft.image),\n        total: 1\n      };\n    });\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (!client || !user) return;\n      const contract = CW721(config.contract).use(client);\n      const result = await contract.tokens(user, undefined, maxItemsPerPage);\n      setNfts(await getNftsInfo(result.tokens, contract));\n    })();\n  }, [client, user]);\n  useEffect(() => {\n    (async () => {\n      if (!client || !user) return;\n      const contract = CW721(config.contract).use(client);\n      const marketcw = Market(config.marketContract).use(client);\n      const result = await marketcw.offersBySeller(user, undefined, maxItemsPerPage);\n      const tokens = await getNftsInfo(result.offers.map(o => o.token_id), contract);\n      const items = tokens.map((nft, idx) => {\n        const off = result.offers[idx];\n        nft.price = formatPrice(off.list_price);\n        return nft;\n      });\n      setNftSale(items);\n    })();\n  }, [client, user]);\n\n  const getNftPath = nftId => `${address === user ? \"/account\" : \"\"}/token/${nftId}`;\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    m: 5,\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 10,\n      align: \"stretch\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 4,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Image, {\n              borderRadius: \"full\",\n              boxSize: \"120px\",\n              src: userLogo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            bg: \"gray.500\",\n            borderRadius: \"xl\",\n            py: 1,\n            px: 3,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              color: \"white\",\n              fontFamily: \"mono\",\n              fontSize: \"sm\",\n              children: user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          isManual: true,\n          isLazy: true,\n          defaultIndex: 1,\n          colorScheme: \"cyan\",\n          children: [/*#__PURE__*/_jsxDEV(TabList, {\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              children: \"On Sale\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              children: \"Owned\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TabPanels, {\n            children: [/*#__PURE__*/_jsxDEV(TabPanel, {\n              children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n                spacing: 10,\n                gridTemplateColumns: [\"repeat(1, minmax(0px, 1fr))\", \"repeat(3, minmax(0px, 1fr))\", \"repeat(5, minmax(0px, 1fr))\"],\n                children: nftSale.map(nft => /*#__PURE__*/_jsxDEV(LinkBox, {\n                  as: \"picture\",\n                  transition: \"transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1) 0s\",\n                  _hover: {\n                    transform: \"scale(1.05)\"\n                  },\n                  children: /*#__PURE__*/_jsxDEV(LinkOverlay, {\n                    as: ReactRouterLink,\n                    to: getNftPath(nft.tokenId),\n                    children: /*#__PURE__*/_jsxDEV(NftCard, {\n                      nft: nft\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 23\n                  }, this)\n                }, nft.tokenId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n                spacing: 10,\n                gridTemplateColumns: [\"repeat(1, minmax(0px, 1fr))\", \"repeat(3, minmax(0px, 1fr))\", \"repeat(5, minmax(0px, 1fr))\"],\n                children: nfts.map(nft => /*#__PURE__*/_jsxDEV(LinkBox, {\n                  as: \"picture\",\n                  transition: \"transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1) 0s\",\n                  _hover: {\n                    transform: \"scale(1.05)\"\n                  },\n                  children: /*#__PURE__*/_jsxDEV(LinkOverlay, {\n                    as: ReactRouterLink,\n                    to: getNftPath(nft.tokenId),\n                    children: /*#__PURE__*/_jsxDEV(NftCard, {\n                      nft: nft\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 157,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 23\n                  }, this)\n                }, nft.tokenId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Account, \"+Pxup5XBUeRwTr/+KbLOxakt7yk=\", false, function () {\n  return [useParams, useSdk];\n});\n\n_c = Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/oldFrontend/pages/account/index.tsx"],"names":["React","Box","Flex","Image","LinkBox","LinkOverlay","SimpleGrid","Tab","TabList","TabPanel","TabPanels","Tabs","Text","VStack","CW721","Market","formatPrice","publicIpfsUrl","useSdk","Link","ReactRouterLink","useParams","useEffect","useState","NftCard","config","maxItemsPerPage","Account","user","client","address","nfts","setNfts","nftSale","setNftSale","getNftsInfo","ids","contract","allNfts","forEach","tokenId","push","nftInfo","tokens","Promise","all","map","nft","idx","title","name","price","image","total","use","result","undefined","marketcw","marketContract","offersBySeller","offers","o","token_id","items","off","list_price","getNftPath","nftId","userLogo","transform"],"mappings":"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","sourcesContent":["import * as React from \"react\";\n\nimport {\n  Box,\n  Flex,\n  Image,\n  LinkBox,\n  LinkOverlay,\n  SimpleGrid,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport {\n  CW721,\n  CW721Instance,\n  Market,\n  NftInfo,\n  NftInfoResponse,\n  formatPrice,\n  publicIpfsUrl,\n  useSdk,\n} from \"../../../services\";\nimport { Link as ReactRouterLink, useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\n\nimport { NftCard } from \"../../../components\";\nimport { config } from \"../../../../config\";\nimport userLogo from \"../../assets/user-default.svg\";\n\ninterface AccountParams {\n  readonly user: string;\n}\n\nconst maxItemsPerPage = 15;\n\nexport const Account = () => {\n  const { user } = useParams<AccountParams>();\n\n  const { client, address } = useSdk();\n  const [nfts, setNfts] = useState<NftInfo[]>([]);\n  const [nftSale, setNftSale] = useState<NftInfo[]>([]);\n\n  const getNftsInfo = async (ids: string[], contract: CW721Instance) => {\n    const allNfts: Promise<NftInfoResponse>[] = [];\n    ids.forEach(tokenId => {\n      allNfts.push(contract.nftInfo(tokenId));\n    });\n\n    const tokens = await Promise.all(allNfts);\n    return tokens.map((nft, idx) => {\n      return {\n        tokenId: ids[idx],\n        user: 'unknown',\n        title: nft.name,\n        price: 'Not listed',\n        image: publicIpfsUrl(nft.image),\n        total: 1\n      };\n    });\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (!client || !user) return;\n\n      const contract = CW721(config.contract).use(client);\n      const result = await contract.tokens(user, undefined, maxItemsPerPage);\n      setNfts(await getNftsInfo(result.tokens, contract));\n    })();\n  }, [client, user]);\n\n  useEffect(() => {\n    (async () => {\n      if (!client || !user) return;\n\n      const contract = CW721(config.contract).use(client);\n      const marketcw = Market(config.marketContract).use(client);\n      const result = await marketcw.offersBySeller(user, undefined, maxItemsPerPage);\n      const tokens = await getNftsInfo(result.offers.map(o => o.token_id), contract);\n\n      const items = tokens.map((nft, idx) => {\n        const off = result.offers[idx];\n        nft.price = formatPrice(off.list_price);\n        return nft;\n      });\n      setNftSale(items);\n    })();\n  }, [client, user]);\n\n  const getNftPath = (nftId: string) => `${address === user ? \"/account\" : \"\"}/token/${nftId}`;\n\n  return (\n    <Box m={5}>\n      <VStack\n        spacing={10}\n        align=\"stretch\"\n      >\n        <Flex justifyContent={\"center\"}>\n          <VStack spacing={4}>\n            <Box>\n              <Image\n                borderRadius=\"full\"\n                boxSize=\"120px\"\n                src={userLogo} />\n            </Box>\n            <Box bg=\"gray.500\" borderRadius=\"xl\" py={1} px={3}>\n              <Text\n                color={\"white\"}\n                fontFamily=\"mono\"\n                fontSize=\"sm\">\n                {user}\n              </Text>\n            </Box>\n          </VStack>\n        </Flex>\n        <Box>\n          <Tabs\n            isManual\n            isLazy\n            defaultIndex={1}\n            colorScheme=\"cyan\">\n            <TabList>\n              <Tab>On Sale</Tab>\n              <Tab>Owned</Tab>\n            </TabList>\n\n            <TabPanels>\n              <TabPanel>\n                <SimpleGrid spacing={10} gridTemplateColumns={[\"repeat(1, minmax(0px, 1fr))\", \"repeat(3, minmax(0px, 1fr))\", \"repeat(5, minmax(0px, 1fr))\"]}>\n                  {nftSale.map(nft => (\n                    <LinkBox as=\"picture\" key={nft.tokenId}\n                      transition=\"transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1) 0s\"\n                      _hover={{\n                        transform: \"scale(1.05)\"\n                      }}>\n                      <LinkOverlay as={ReactRouterLink} to={getNftPath(nft.tokenId)}>\n                        <NftCard nft={nft} />\n                      </LinkOverlay>\n                    </LinkBox>\n                  ))}\n                </SimpleGrid>\n              </TabPanel>\n              <TabPanel>\n                <SimpleGrid spacing={10} gridTemplateColumns={[\"repeat(1, minmax(0px, 1fr))\", \"repeat(3, minmax(0px, 1fr))\", \"repeat(5, minmax(0px, 1fr))\"]}>\n                  {nfts.map(nft => (\n                    <LinkBox as=\"picture\" key={nft.tokenId}\n                      transition=\"transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1) 0s\"\n                      _hover={{\n                        transform: \"scale(1.05)\"\n                      }}>\n                      <LinkOverlay as={ReactRouterLink} to={getNftPath(nft.tokenId)}>\n                        <NftCard nft={nft} />\n                      </LinkOverlay>\n                    </LinkBox>\n                  ))}\n                </SimpleGrid>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </VStack>\n    </Box>\n  );\n};"]},"metadata":{},"sourceType":"module"}