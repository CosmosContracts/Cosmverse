{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromUtf8 = exports.toUtf8 = void 0;\n\nfunction isValidUtf8(data) {\n  var toStringAndBack = Buffer.from(Buffer.from(data).toString(\"utf8\"), \"utf8\");\n  return Buffer.compare(Buffer.from(data), toStringAndBack) === 0;\n}\n\nfunction toUtf8(str) {\n  // Browser and future nodejs (https://github.com/nodejs/node/issues/20365)\n  if (typeof TextEncoder !== \"undefined\") {\n    return new TextEncoder().encode(str);\n  } // Use Buffer hack instead of nodejs util.TextEncoder to ensure\n  // webpack does not bundle the util module for browsers.\n\n\n  return new Uint8Array(Buffer.from(str, \"utf8\"));\n}\n\nexports.toUtf8 = toUtf8;\n\nfunction fromUtf8(data) {\n  // Browser and future nodejs (https://github.com/nodejs/node/issues/20365)\n  if (typeof TextDecoder !== \"undefined\") {\n    return new TextDecoder(\"utf-8\", {\n      fatal: true\n    }).decode(data);\n  } // Use Buffer hack instead of nodejs util.TextDecoder to ensure\n  // webpack does not bundle the util module for browsers.\n  // Buffer.toString has no fatal option\n\n\n  if (!isValidUtf8(data)) {\n    throw new Error(\"Invalid UTF8 data\");\n  }\n\n  return Buffer.from(data).toString(\"utf8\");\n}\n\nexports.fromUtf8 = fromUtf8;","map":null,"metadata":{},"sourceType":"script"}