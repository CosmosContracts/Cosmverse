{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LcdClient = exports.normalizeLcdApiArray = void 0;\n/* eslint-disable no-dupe-class-members, @typescript-eslint/ban-types, @typescript-eslint/naming-convention */\n\nvar utils_1 = require(\"@cosmjs/utils\");\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar base_1 = require(\"./base\");\n\nfunction normalizeLcdApiArray(backend) {\n  return backend || [];\n}\n\nexports.normalizeLcdApiArray = normalizeLcdApiArray; // We want to get message data from 500 errors\n// https://stackoverflow.com/questions/56577124/how-to-handle-500-error-message-with-axios\n// this should be chained to catch one error and throw a more informative one\n\nfunction parseAxiosError(err) {\n  var _a; // use the error message sent from server, not default 500 msg\n\n\n  if ((_a = err.response) === null || _a === void 0 ? void 0 : _a.data) {\n    var errorText;\n    var data = err.response.data; // expect { error: string }, but otherwise dump\n\n    if (data.error && typeof data.error === \"string\") {\n      errorText = data.error;\n    } else if (typeof data === \"string\") {\n      errorText = data;\n    } else {\n      errorText = JSON.stringify(data);\n    }\n\n    throw new Error(\"\".concat(errorText, \" (HTTP \").concat(err.response.status, \")\"));\n  } else {\n    throw err;\n  }\n}\n/**\n * A client to the LCD's (light client daemon) API.\n * This light client connects to Tendermint (i.e. the chain), encodes/decodes Amino data for us and provides a convenient JSON interface.\n *\n * This _JSON over HTTP_ API is sometimes referred to as \"REST\" or \"RPC\", which are both misleading terms\n * for the same thing.\n *\n * Please note that the client to the LCD can not verify light client proofs. When using this,\n * you need to trust the API provider as well as the network connection between client and API.\n *\n * @see https://cosmos.network/rpc\n */\n\n\nvar LcdClient = /*#__PURE__*/function () {\n  /**\n   * Creates a new client to interact with a Cosmos SDK light client daemon.\n   * This class tries to be a direct mapping onto the API. Some basic decoding and normalizatin is done\n   * but things like caching are done at a higher level.\n   *\n   * When building apps, you should not need to use this class directly. If you do, this indicates a missing feature\n   * in higher level components. Feel free to raise an issue in this case.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param broadcastMode Defines at which point of the transaction processing the broadcastTx method returns\n   */\n  function LcdClient(apiUrl) {\n    var broadcastMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : base_1.BroadcastMode.Block;\n\n    _classCallCheck(this, LcdClient);\n\n    var headers = {\n      post: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    this.client = axios_1.default.create({\n      baseURL: apiUrl,\n      headers: headers\n    });\n    this.broadcastMode = broadcastMode;\n  }\n\n  _createClass(LcdClient, [{\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, params) {\n        var _yield$this$client$ge, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.client.get(path, {\n                  params: params\n                }).catch(parseAxiosError);\n\n              case 2:\n                _yield$this$client$ge = _context.sent;\n                data = _yield$this$client$ge.data;\n\n                if (!(data === null)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Received null response from server\");\n\n              case 6:\n                return _context.abrupt(\"return\", data);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x, _x2) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }() // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(path, params) {\n        var _yield$this$client$po, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (utils_1.isNonNullObject(params)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Got unexpected type of params. Expected object.\");\n\n              case 2:\n                _context2.next = 4;\n                return this.client.post(path, params).catch(parseAxiosError);\n\n              case 4:\n                _yield$this$client$po = _context2.sent;\n                data = _yield$this$client$po.data;\n\n                if (!(data === null)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Received null response from server\");\n\n              case 8:\n                return _context2.abrupt(\"return\", data);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function post(_x3, _x4) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }() // The /blocks endpoints\n\n  }, {\n    key: \"blocksLatest\",\n    value: function () {\n      var _blocksLatest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.get(\"/blocks/latest\");\n\n              case 2:\n                responseData = _context3.sent;\n\n                if (responseData.block) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context3.abrupt(\"return\", responseData);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function blocksLatest() {\n        return _blocksLatest.apply(this, arguments);\n      }\n\n      return blocksLatest;\n    }()\n  }, {\n    key: \"blocks\",\n    value: function () {\n      var _blocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(height) {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.get(\"/blocks/\".concat(height));\n\n              case 2:\n                responseData = _context4.sent;\n\n                if (responseData.block) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context4.abrupt(\"return\", responseData);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function blocks(_x5) {\n        return _blocks.apply(this, arguments);\n      }\n\n      return blocks;\n    }() // The /node_info endpoint\n\n  }, {\n    key: \"nodeInfo\",\n    value: function () {\n      var _nodeInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.get(\"/node_info\");\n\n              case 2:\n                responseData = _context5.sent;\n\n                if (responseData.node_info) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context5.abrupt(\"return\", responseData);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function nodeInfo() {\n        return _nodeInfo.apply(this, arguments);\n      }\n\n      return nodeInfo;\n    }() // The /txs endpoints\n\n  }, {\n    key: \"txById\",\n    value: function () {\n      var _txById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.get(\"/txs/\".concat(id));\n\n              case 2:\n                responseData = _context6.sent;\n\n                if (responseData.tx) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context6.abrupt(\"return\", responseData);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function txById(_x6) {\n        return _txById.apply(this, arguments);\n      }\n\n      return txById;\n    }()\n  }, {\n    key: \"txsQuery\",\n    value: function () {\n      var _txsQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(query) {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.get(\"/txs?\".concat(query));\n\n              case 2:\n                responseData = _context7.sent;\n\n                if (responseData.txs) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context7.abrupt(\"return\", responseData);\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function txsQuery(_x7) {\n        return _txsQuery.apply(this, arguments);\n      }\n\n      return txsQuery;\n    }()\n    /** returns the amino-encoding of the transaction performed by the server */\n\n  }, {\n    key: \"encodeTx\",\n    value: function () {\n      var _encodeTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(tx) {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.post(\"/txs/encode\", tx);\n\n              case 2:\n                responseData = _context8.sent;\n\n                if (responseData.tx) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context8.abrupt(\"return\", responseData);\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function encodeTx(_x8) {\n        return _encodeTx.apply(this, arguments);\n      }\n\n      return encodeTx;\n    }()\n    /**\n     * Broadcasts a signed transaction to the transaction pool.\n     * Depending on the client's broadcast mode, this might or might\n     * wait for checkTx or deliverTx to be executed before returning.\n     *\n     * @param tx a signed transaction as StdTx (i.e. not wrapped in type/value container)\n     */\n\n  }, {\n    key: \"broadcastTx\",\n    value: function () {\n      var _broadcastTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(tx) {\n        var params, responseData;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                params = {\n                  tx: tx,\n                  mode: this.broadcastMode\n                };\n                _context9.next = 3;\n                return this.post(\"/txs\", params);\n\n              case 3:\n                responseData = _context9.sent;\n\n                if (responseData.txhash) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 6:\n                return _context9.abrupt(\"return\", responseData);\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function broadcastTx(_x9) {\n        return _broadcastTx.apply(this, arguments);\n      }\n\n      return broadcastTx;\n    }()\n  }], [{\n    key: \"withExtensions\",\n    value: function withExtensions(options) {\n      var client = new LcdClient(options.apiUrl, options.broadcastMode);\n\n      for (var _len = arguments.length, extensionSetups = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        extensionSetups[_key - 1] = arguments[_key];\n      }\n\n      var extensions = extensionSetups.map(function (setupExtension) {\n        return setupExtension(client);\n      });\n\n      var _iterator = _createForOfIteratorHelper(extensions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var extension = _step.value;\n          utils_1.assert(utils_1.isNonNullObject(extension), \"Extension must be a non-null object\");\n\n          for (var _i = 0, _Object$entries = Object.entries(extension); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                moduleKey = _Object$entries$_i[0],\n                moduleValue = _Object$entries$_i[1];\n\n            utils_1.assert(utils_1.isNonNullObject(moduleValue), \"Module must be a non-null object. Found type \".concat(typeof moduleValue, \" for module \\\"\").concat(moduleKey, \"\\\".\"));\n            var current = client[moduleKey] || {};\n            client[moduleKey] = Object.assign(Object.assign({}, current), moduleValue);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return client;\n    }\n  }]);\n\n  return LcdClient;\n}();\n\nexports.LcdClient = LcdClient;","map":null,"metadata":{},"sourceType":"script"}