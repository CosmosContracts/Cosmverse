{"ast":null,"code":"import _slicedToArray from \"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nexport function useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!env.window.matchMedia(query).matches : false;\n  })),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      matches = _React$useState2[0],\n      setMatches = _React$useState2[1];\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function () {\n      var listener = function listener() {\n        var isEqual = function isEqual(prev, curr) {\n          return prev.length === curr.length && prev.every(function (elem, idx) {\n            return elem === curr[idx];\n          });\n        };\n\n        var currentMatches = mediaQueryList.map(function (mediaQuery) {\n          return mediaQuery.matches;\n        });\n\n        if (!isEqual(matches, currentMatches)) {\n          setMatches(currentMatches);\n        }\n      };\n\n      env.window.addEventListener(\"resize\", listener);\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        env.window.removeEventListener(\"resize\", listenerList[index]);\n      });\n    };\n  }, [query]);\n  return matches;\n}","map":null,"metadata":{},"sourceType":"module"}