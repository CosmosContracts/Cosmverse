{"ast":null,"code":"var _jsxFileName = \"/Users/pauloponciano/Documents/cosmverse/src/App/pages/gallery/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Box } from \"@chakra-ui/react\";\nimport { LoadingSpinner, NftTable, Pagination } from \"../../components\";\nimport { CW721, formatPrice, Market, publicIpfsUrl, useSdk } from \"../../services\";\nimport { config } from \"../../../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst pageSize = 15;\nexport const Gallery = () => {\n  _s();\n\n  const {\n    client\n  } = useSdk();\n  const [nfts, setNfts] = useState([]);\n  const [totalTokens, setTotalTokens] = useState(0);\n  const [pages, setPages] = useState([undefined]);\n  const loadNfts = useCallback(async page => {\n    if (!client) return;\n    const start = pages[page - 1];\n    const contract = CW721(config.contract).use(client);\n    const marketcw = Market(config.marketContract).use(client);\n    const result = await contract.allTokens(start, pageSize);\n    const numTokens = await contract.numTokens();\n    const allNfts = [];\n    const allOffers = [];\n    result.tokens.forEach(tokenId => {\n      allNfts.push(contract.nftInfo(tokenId));\n      allOffers.push(marketcw.offer(config.contract, tokenId));\n    });\n    const tokens = await Promise.all(allNfts);\n    const offers = await Promise.all(allOffers);\n    const items = tokens.map((nft, idx) => {\n      const off = offers[idx];\n      return {\n        tokenId: result.tokens[idx],\n        user: 'unknown',\n        title: nft.name,\n        price: off ? formatPrice(off.list_price) : \"Not listed\",\n        image: publicIpfsUrl(nft.image),\n        total: 1\n      };\n    });\n\n    if (page >= pages.length) {\n      const lastTokenId = result.tokens[result.tokens.length - 1];\n      pages.push(lastTokenId);\n      setPages(pages);\n    }\n\n    setPages(pages);\n    setNfts(items);\n    setTotalTokens(numTokens);\n  }, [client, pages]);\n  useEffect(() => {\n    loadNfts(1);\n  }, [loadNfts]);\n\n  const handlePage = async page => {\n    await loadNfts(page);\n  };\n\n  const bodyContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NftTable, {\n      data: nfts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      onChangePage: handlePage,\n      total: totalTokens,\n      step: pageSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mx: 5,\n    my: 8,\n    children: nfts.length === 0 ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 28\n    }, this) : bodyContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Gallery, \"HEEaXzEi9eIppDu+y+dUCJBGn0Y=\", false, function () {\n  return [useSdk];\n});\n\n_c = Gallery;\n\nvar _c;\n\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/pages/gallery/index.tsx"],"names":["React","useCallback","useEffect","useState","Box","LoadingSpinner","NftTable","Pagination","CW721","formatPrice","Market","publicIpfsUrl","useSdk","config","pageSize","Gallery","client","nfts","setNfts","totalTokens","setTotalTokens","pages","setPages","undefined","loadNfts","page","start","contract","use","marketcw","marketContract","result","allTokens","numTokens","allNfts","allOffers","tokens","forEach","tokenId","push","nftInfo","offer","Promise","all","offers","items","map","nft","idx","off","user","title","name","price","list_price","image","total","length","lastTokenId","handlePage","bodyContent"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport {\n  Box,\n} from \"@chakra-ui/react\";\nimport { LoadingSpinner, NftTable, Pagination } from \"../../components\";\nimport {\n  CW721,\n  formatPrice,\n  NftInfoResponse,\n  Market,\n  NftInfo,\n  publicIpfsUrl,\n  OfferResponse,\n  useSdk,\n} from \"../../services\";\nimport { config } from \"../../../config\";\n\nconst pageSize = 15;\n\nexport const Gallery = () => {\n  const { client } = useSdk();\n  const [nfts, setNfts] = useState<NftInfo[]>([]);\n  const [totalTokens, setTotalTokens] = useState<number>(0);\n  const [pages, setPages] = useState<(string|undefined)[]>([undefined]);\n\n  const loadNfts = useCallback(async (page: number) => {\n    if (!client) return;\n\n    const start = pages[page-1];\n    const contract = CW721(config.contract).use(client);\n    const marketcw = Market(config.marketContract).use(client);\n    const result = await contract.allTokens(start, pageSize);\n    const numTokens = await contract.numTokens();\n\n    const allNfts: Promise<NftInfoResponse>[] = [];\n    const allOffers: Promise<OfferResponse|undefined>[] = [];\n    result.tokens.forEach(tokenId => {\n      allNfts.push(contract.nftInfo(tokenId));\n      allOffers.push(marketcw.offer(config.contract, tokenId));\n    });\n\n    const tokens = await Promise.all(allNfts);\n    const offers = await Promise.all(allOffers);\n    const items = tokens.map((nft, idx) => {\n      const off = offers[idx];\n      return {\n        tokenId: result.tokens[idx],\n        user: 'unknown',\n        title: nft.name,\n        price: off ? formatPrice(off.list_price): \"Not listed\",\n        image: publicIpfsUrl(nft.image),\n        total: 1\n      };\n    });\n\n    if (page >= pages.length) {\n      const lastTokenId = result.tokens[result.tokens.length - 1];\n      pages.push(lastTokenId);\n      setPages(pages);\n    }\n\n    setPages(pages);\n    setNfts(items);\n    setTotalTokens(numTokens);\n  }, [client, pages]);\n\n  useEffect(() => {\n    loadNfts(1);\n  }, [loadNfts]);\n\n  const handlePage = async (page: number) => {\n    await loadNfts(page);\n  };\n\n  const bodyContent = (\n    <>\n      <NftTable data={nfts} />\n      <Pagination onChangePage={handlePage} total={totalTokens} step={pageSize} />\n    </>\n  )\n\n  return (\n    <Box mx={5} my={8}>\n      {nfts.length === 0 ? <LoadingSpinner /> : bodyContent}\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}