{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningCosmosClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar amino_1 = require(\"@cosmjs/amino\");\n\nvar fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\n\nvar cosmosclient_1 = require(\"./cosmosclient\");\n\nvar fee_1 = require(\"./fee\");\n\nvar lcdapi_1 = require(\"./lcdapi\");\n\nvar tx_1 = require(\"./tx\");\n\nvar defaultGasPrice = fee_1.GasPrice.fromString(\"0.025ucosm\");\nvar defaultGasLimits = {\n  send: 80000\n};\n\nvar SigningCosmosClient = /*#__PURE__*/function (_cosmosclient_1$Cosmo) {\n  _inherits(SigningCosmosClient, _cosmosclient_1$Cosmo);\n\n  var _super = _createSuper(SigningCosmosClient);\n\n  /**\n   * Creates a new client with signing capability to interact with a Cosmos SDK blockchain. This is the bigger brother of CosmosClient.\n   *\n   * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n   * for the lifetime of your application. When switching backends, a new instance must be created.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param signerAddress The address that will sign transactions using this instance. The `signer` must be able to sign with this address.\n   * @param signer An implementation of OfflineAminoSigner which can provide signatures for transactions, potentially requiring user input.\n   * @param gasPrice The price paid per unit of gas\n   * @param gasLimits Custom overrides for gas limits related to specific transaction types\n   * @param broadcastMode Defines at which point of the transaction processing the broadcastTx method returns\n   */\n  function SigningCosmosClient(apiUrl, signerAddress, signer) {\n    var _this;\n\n    var gasPrice = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultGasPrice;\n    var gasLimits = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var broadcastMode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : lcdapi_1.BroadcastMode.Block;\n\n    _classCallCheck(this, SigningCosmosClient);\n\n    _this = _super.call(this, apiUrl, broadcastMode);\n    _this.anyValidAddress = signerAddress;\n    _this.signerAddress = signerAddress;\n    _this.signer = signer;\n    _this.fees = fee_1.buildFeeTable(gasPrice, defaultGasLimits, gasLimits);\n    return _this;\n  }\n\n  _createClass(SigningCosmosClient, [{\n    key: \"getSequence\",\n    value: function () {\n      var _getSequence = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", _get(_getPrototypeOf(SigningCosmosClient.prototype), \"getSequence\", this).call(this, address || this.signerAddress));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getSequence(_x) {\n        return _getSequence.apply(this, arguments);\n      }\n\n      return getSequence;\n    }()\n  }, {\n    key: \"getAccount\",\n    value: function () {\n      var _getAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", _get(_getPrototypeOf(SigningCosmosClient.prototype), \"getAccount\", this).call(this, address || this.signerAddress));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAccount(_x2) {\n        return _getAccount.apply(this, arguments);\n      }\n\n      return getAccount;\n    }()\n  }, {\n    key: \"sendTokens\",\n    value: function () {\n      var _sendTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(recipientAddress, amount) {\n        var memo,\n            sendMsg,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                memo = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : \"\";\n                sendMsg = {\n                  type: \"cosmos-sdk/MsgSend\",\n                  value: {\n                    from_address: this.signerAddress,\n                    to_address: recipientAddress,\n                    amount: amount\n                  }\n                };\n                return _context3.abrupt(\"return\", this.signAndBroadcast([sendMsg], this.fees.send, memo));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function sendTokens(_x3, _x4) {\n        return _sendTokens.apply(this, arguments);\n      }\n\n      return sendTokens;\n    }()\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature, assembles the signed transaction and broadcasts it.\n     */\n\n  }, {\n    key: \"signAndBroadcast\",\n    value: function () {\n      var _signAndBroadcast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(msgs, fee) {\n        var memo,\n            signedTx,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                memo = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : \"\";\n                _context4.next = 3;\n                return this.sign(msgs, fee, memo);\n\n              case 3:\n                signedTx = _context4.sent;\n                return _context4.abrupt(\"return\", this.broadcastTx(signedTx));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function signAndBroadcast(_x5, _x6) {\n        return _signAndBroadcast.apply(this, arguments);\n      }\n\n      return signAndBroadcast;\n    }()\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature and assembles the signed transaction.\n     */\n\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(msgs, fee) {\n        var memo,\n            _yield$this$getSequen,\n            accountNumber,\n            sequence,\n            chainId,\n            signDoc,\n            _yield$this$signer$si,\n            signed,\n            signature,\n            _args5 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                memo = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : \"\";\n                _context5.next = 3;\n                return this.getSequence();\n\n              case 3:\n                _yield$this$getSequen = _context5.sent;\n                accountNumber = _yield$this$getSequen.accountNumber;\n                sequence = _yield$this$getSequen.sequence;\n                _context5.next = 8;\n                return this.getChainId();\n\n              case 8:\n                chainId = _context5.sent;\n                signDoc = amino_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n                _context5.next = 12;\n                return this.signer.signAmino(this.signerAddress, signDoc);\n\n              case 12:\n                _yield$this$signer$si = _context5.sent;\n                signed = _yield$this$signer$si.signed;\n                signature = _yield$this$signer$si.signature;\n                return _context5.abrupt(\"return\", tx_1.makeStdTx(signed, signature));\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function sign(_x7, _x8) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature and appends it to the existing signatures.\n     */\n\n  }, {\n    key: \"appendSignature\",\n    value: function () {\n      var _appendSignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(signedTx) {\n        var msgs, fee, memo, _yield$this$getSequen2, accountNumber, sequence, chainId, signDoc, _yield$this$signer$si2, signed, additionalSignature;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                msgs = signedTx.msg, fee = signedTx.fee, memo = signedTx.memo;\n                _context6.next = 3;\n                return this.getSequence();\n\n              case 3:\n                _yield$this$getSequen2 = _context6.sent;\n                accountNumber = _yield$this$getSequen2.accountNumber;\n                sequence = _yield$this$getSequen2.sequence;\n                _context6.next = 8;\n                return this.getChainId();\n\n              case 8:\n                chainId = _context6.sent;\n                signDoc = amino_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n                _context6.next = 12;\n                return this.signer.signAmino(this.signerAddress, signDoc);\n\n              case 12:\n                _yield$this$signer$si2 = _context6.sent;\n                signed = _yield$this$signer$si2.signed;\n                additionalSignature = _yield$this$signer$si2.signature;\n\n                if (fast_deep_equal_1.default(signDoc, signed)) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                throw new Error(\"The signed document differs from the one of the original transaction. This is not allowed since the resulting transaction will be invalid.\");\n\n              case 17:\n                return _context6.abrupt(\"return\", tx_1.makeStdTx(signed, [].concat(_toConsumableArray(signedTx.signatures), [additionalSignature])));\n\n              case 18:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function appendSignature(_x9) {\n        return _appendSignature.apply(this, arguments);\n      }\n\n      return appendSignature;\n    }()\n  }]);\n\n  return SigningCosmosClient;\n}(cosmosclient_1.CosmosClient);\n\nexports.SigningCosmosClient = SigningCosmosClient;","map":null,"metadata":{},"sourceType":"script"}