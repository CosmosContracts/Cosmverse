{"ast":null,"code":"import _objectSpread from\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{CosmWasmClient}from\"@cosmjs/cosmwasm-stargate\";import{SigningCosmWasmClient}from\"@cosmjs/cosmwasm-stargate\";import{defaultGasLimits as defaultStargateGasLimits,GasPrice}from\"@cosmjs/stargate\";export function loadKeplrWallet(_x){return _loadKeplrWallet.apply(this,arguments);}// this creates a new connection to a server at URL,\nfunction _loadKeplrWallet(){_loadKeplrWallet=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId){var anyWindow,signer;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:anyWindow=window;if(anyWindow.getOfflineSignerAuto){_context.next=3;break;}throw new Error(\"Keplr extension is not available\");case 3:signer=anyWindow.getOfflineSignerAuto(chainId);return _context.abrupt(\"return\",Promise.resolve(signer));case 5:case\"end\":return _context.stop();}}},_callee);}));return _loadKeplrWallet.apply(this,arguments);}export function createClient(_x2,_x3){return _createClient.apply(this,arguments);}function _createClient(){_createClient=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config,signer){var gasLimits;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:gasLimits=_objectSpread(_objectSpread({},defaultStargateGasLimits),{},{upload:1500000,init:600000,exec:400000,migrate:600000,send:80000,changeAdmin:80000});return _context2.abrupt(\"return\",SigningCosmWasmClient.connectWithSigner(config.rpcUrl,signer,{prefix:config.addressPrefix,gasPrice:GasPrice.fromString(\"\".concat(config.gasPrice).concat(config.token.coinMinimalDenom)),gasLimits:gasLimits}));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return _createClient.apply(this,arguments);}export function createSimpleClient(config){return CosmWasmClient.connect(config.rpcUrl);}","map":null,"metadata":{},"sourceType":"module"}