{"ast":null,"code":"export function getAppConfig(configs) {\n  const network = process.env.REACT_APP_NETWORK;\n  if (!network) return configs.testnet;\n  const config = configs[network];\n\n  if (!config) {\n    throw new Error(`No configuration found for network ${network}`);\n  }\n\n  return config;\n}\nexport function configKeplr(config) {\n  return {\n    chainId: config.chainId,\n    chainName: config.chainName,\n    rpc: config.rpcUrl,\n    rest: config.httpUrl,\n    bech32Config: {\n      bech32PrefixAccAddr: `${config.addressPrefix}`,\n      bech32PrefixAccPub: `${config.addressPrefix}pub`,\n      bech32PrefixValAddr: `${config.addressPrefix}valoper`,\n      bech32PrefixValPub: `${config.addressPrefix}valoperpub`,\n      bech32PrefixConsAddr: `${config.addressPrefix}valcons`,\n      bech32PrefixConsPub: `${config.addressPrefix}valconspub`\n    },\n    currencies: [config.token],\n    feeCurrencies: [config.token],\n    stakeCurrency: config.token,\n    gasPriceStep: {\n      low: config.gasPrice / 2,\n      average: config.gasPrice,\n      high: config.gasPrice * 2\n    },\n    bip44: {\n      coinType: 118\n    },\n    coinType: 118,\n    features: [\"stargate\", 'ibc-transfer', 'cosmwasm']\n  };\n}","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/services/config/network.ts"],"names":["getAppConfig","configs","network","process","env","REACT_APP_NETWORK","testnet","config","Error","configKeplr","chainId","chainName","rpc","rpcUrl","rest","httpUrl","bech32Config","bech32PrefixAccAddr","addressPrefix","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","token","feeCurrencies","stakeCurrency","gasPriceStep","low","gasPrice","average","high","bip44","coinType","features"],"mappings":"AAoBA,OAAO,SAASA,YAAT,CAAsBC,OAAtB,EAA0D;AAC/D,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AACA,MAAI,CAACH,OAAL,EAAc,OAAOD,OAAO,CAACK,OAAf;AAEd,QAAMC,MAAM,GAAGN,OAAO,CAACC,OAAD,CAAtB;;AACA,MAAI,CAACK,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAW,sCAAqCN,OAAQ,EAAxD,CAAN;AACD;;AAED,SAAOK,MAAP;AACD;AAED,OAAO,SAASE,WAAT,CAAqBF,MAArB,EAAmD;AACxD,SAAO;AACLG,IAAAA,OAAO,EAAEH,MAAM,CAACG,OADX;AAELC,IAAAA,SAAS,EAAEJ,MAAM,CAACI,SAFb;AAGLC,IAAAA,GAAG,EAAEL,MAAM,CAACM,MAHP;AAILC,IAAAA,IAAI,EAAEP,MAAM,CAACQ,OAJR;AAKLC,IAAAA,YAAY,EAAE;AACZC,MAAAA,mBAAmB,EAAG,GAAEV,MAAM,CAACW,aAAc,EADjC;AAEZC,MAAAA,kBAAkB,EAAG,GAAEZ,MAAM,CAACW,aAAc,KAFhC;AAGZE,MAAAA,mBAAmB,EAAG,GAAEb,MAAM,CAACW,aAAc,SAHjC;AAIZG,MAAAA,kBAAkB,EAAG,GAAEd,MAAM,CAACW,aAAc,YAJhC;AAKZI,MAAAA,oBAAoB,EAAG,GAAEf,MAAM,CAACW,aAAc,SALlC;AAMZK,MAAAA,mBAAmB,EAAG,GAAEhB,MAAM,CAACW,aAAc;AANjC,KALT;AAaLM,IAAAA,UAAU,EAAE,CAACjB,MAAM,CAACkB,KAAR,CAbP;AAcLC,IAAAA,aAAa,EAAE,CAACnB,MAAM,CAACkB,KAAR,CAdV;AAeLE,IAAAA,aAAa,EAAEpB,MAAM,CAACkB,KAfjB;AAgBLG,IAAAA,YAAY,EAAE;AACZC,MAAAA,GAAG,EAAEtB,MAAM,CAACuB,QAAP,GAAkB,CADX;AAEZC,MAAAA,OAAO,EAAExB,MAAM,CAACuB,QAFJ;AAGZE,MAAAA,IAAI,EAAEzB,MAAM,CAACuB,QAAP,GAAkB;AAHZ,KAhBT;AAqBLG,IAAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KArBF;AAsBLA,IAAAA,QAAQ,EAAE,GAtBL;AAuBLC,IAAAA,QAAQ,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,UAA7B;AAvBL,GAAP;AAyBD","sourcesContent":["import { ChainInfo, Currency } from \"@keplr-wallet/types\";\n\nexport interface AppConfig {\n  readonly chainId: string;\n  readonly chainName: string;\n  readonly addressPrefix: string;\n  readonly rpcUrl: string;\n  readonly httpUrl: string;\n  readonly token: Currency;\n  readonly gasPrice: number;\n  readonly codeId: number;\n  readonly contract: string;\n  readonly marketContract: string;\n}\n\nexport interface NetworkConfigs {\n  readonly testnet: AppConfig;\n  readonly [key: string]: AppConfig;\n}\n\nexport function getAppConfig(configs: NetworkConfigs): AppConfig {\n  const network = process.env.REACT_APP_NETWORK;\n  if (!network) return configs.testnet;\n\n  const config = configs[network];\n  if (!config) {\n    throw new Error(`No configuration found for network ${network}`);\n  }\n\n  return config;\n}\n\nexport function configKeplr(config: AppConfig): ChainInfo {\n  return {\n    chainId: config.chainId,\n    chainName: config.chainName,\n    rpc: config.rpcUrl,\n    rest: config.httpUrl,\n    bech32Config: {\n      bech32PrefixAccAddr: `${config.addressPrefix}`,\n      bech32PrefixAccPub: `${config.addressPrefix}pub`,\n      bech32PrefixValAddr: `${config.addressPrefix}valoper`,\n      bech32PrefixValPub: `${config.addressPrefix}valoperpub`,\n      bech32PrefixConsAddr: `${config.addressPrefix}valcons`,\n      bech32PrefixConsPub: `${config.addressPrefix}valconspub`,\n    },\n    currencies: [config.token],\n    feeCurrencies: [config.token],\n    stakeCurrency: config.token,\n    gasPriceStep: {\n      low: config.gasPrice / 2,\n      average: config.gasPrice,\n      high: config.gasPrice * 2,\n    },\n    bip44: { coinType: 118 },\n    coinType: 118,\n    features: [\"stargate\", 'ibc-transfer', 'cosmwasm']\n  };\n}\n"]},"metadata":{},"sourceType":"module"}