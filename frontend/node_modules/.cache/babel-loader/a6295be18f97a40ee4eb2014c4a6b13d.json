{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningCosmWasmClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar crypto_1 = require(\"@cosmjs/crypto\");\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar launchpad_1 = require(\"@cosmjs/launchpad\");\n\nvar math_1 = require(\"@cosmjs/math\");\n\nvar pako_1 = __importDefault(require(\"pako\"));\n\nvar builder_1 = require(\"./builder\");\n\nvar cosmwasmclient_1 = require(\"./cosmwasmclient\");\n\nfunction prepareBuilder(builder) {\n  if (builder === undefined) {\n    return \"\"; // normalization needed by backend\n  } else {\n    if (!builder_1.isValidBuilder(builder)) throw new Error(\"The builder (Docker Hub image with tag) is not valid\");\n    return builder;\n  }\n}\n\nvar defaultGasPrice = launchpad_1.GasPrice.fromString(\"0.025ucosm\");\nvar defaultGasLimits = {\n  upload: 1500000,\n  init: 500000,\n  migrate: 200000,\n  exec: 200000,\n  send: 80000,\n  changeAdmin: 80000\n};\n\nfunction createBroadcastTxErrorMessage(result) {\n  return \"Error when broadcasting tx \".concat(result.transactionHash, \" at height \").concat(result.height, \". Code: \").concat(result.code, \"; Raw log: \").concat(result.rawLog);\n}\n\nvar SigningCosmWasmClient = /*#__PURE__*/function (_cosmwasmclient_1$Cos) {\n  _inherits(SigningCosmWasmClient, _cosmwasmclient_1$Cos);\n\n  var _super = _createSuper(SigningCosmWasmClient);\n\n  /**\n   * Creates a new client with signing capability to interact with a CosmWasm blockchain. This is the bigger brother of CosmWasmClient.\n   *\n   * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n   * for the lifetime of your application. When switching backends, a new instance must be created.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param signerAddress The address that will sign transactions using this instance. The `signer` must be able to sign with this address.\n   * @param signer An implementation of OfflineSigner which can provide signatures for transactions, potentially requiring user input.\n   * @param gasPrice The price paid per unit of gas\n   * @param gasLimits Custom overrides for gas limits related to specific transaction types\n   * @param broadcastMode Defines at which point of the transaction processing the broadcastTx method returns\n   */\n  function SigningCosmWasmClient(apiUrl, signerAddress, signer) {\n    var _this;\n\n    var gasPrice = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultGasPrice;\n    var gasLimits = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var broadcastMode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : launchpad_1.BroadcastMode.Block;\n\n    _classCallCheck(this, SigningCosmWasmClient);\n\n    _this = _super.call(this, apiUrl, broadcastMode);\n    _this.anyValidAddress = signerAddress;\n    _this.signerAddress = signerAddress;\n    _this.signer = signer;\n    _this.fees = launchpad_1.buildFeeTable(gasPrice, defaultGasLimits, gasLimits);\n    return _this;\n  }\n\n  _createClass(SigningCosmWasmClient, [{\n    key: \"getSequence\",\n    value: function () {\n      var _getSequence = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", _get(_getPrototypeOf(SigningCosmWasmClient.prototype), \"getSequence\", this).call(this, address || this.signerAddress));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getSequence(_x) {\n        return _getSequence.apply(this, arguments);\n      }\n\n      return getSequence;\n    }()\n  }, {\n    key: \"getAccount\",\n    value: function () {\n      var _getAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", _get(_getPrototypeOf(SigningCosmWasmClient.prototype), \"getAccount\", this).call(this, address || this.signerAddress));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAccount(_x2) {\n        return _getAccount.apply(this, arguments);\n      }\n\n      return getAccount;\n    }()\n    /** Uploads code and returns a receipt, including the code ID */\n\n  }, {\n    key: \"upload\",\n    value: function () {\n      var _upload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(wasmCode) {\n        var meta,\n            memo,\n            source,\n            builder,\n            compressed,\n            storeCodeMsg,\n            result,\n            codeIdAttr,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                meta = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                memo = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : \"\";\n                source = meta.source || \"\";\n                builder = prepareBuilder(meta.builder);\n                compressed = pako_1.default.gzip(wasmCode, {\n                  level: 9\n                });\n                storeCodeMsg = {\n                  type: \"wasm/MsgStoreCode\",\n                  value: {\n                    sender: this.signerAddress,\n                    wasm_byte_code: encoding_1.toBase64(compressed),\n                    source: source,\n                    builder: builder\n                  }\n                };\n                _context3.next = 8;\n                return this.signAndBroadcast([storeCodeMsg], this.fees.upload, memo);\n\n              case 8:\n                result = _context3.sent;\n\n                if (!launchpad_1.isBroadcastTxFailure(result)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 11:\n                codeIdAttr = launchpad_1.logs.findAttribute(result.logs, \"message\", \"code_id\");\n                return _context3.abrupt(\"return\", {\n                  originalSize: wasmCode.length,\n                  originalChecksum: encoding_1.toHex(crypto_1.sha256(wasmCode)),\n                  compressedSize: compressed.length,\n                  compressedChecksum: encoding_1.toHex(crypto_1.sha256(compressed)),\n                  codeId: Number.parseInt(codeIdAttr.value, 10),\n                  logs: result.logs,\n                  transactionHash: result.transactionHash\n                });\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function upload(_x3) {\n        return _upload.apply(this, arguments);\n      }\n\n      return upload;\n    }()\n  }, {\n    key: \"instantiate\",\n    value: function () {\n      var _instantiate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(codeId, msg, label) {\n        var options,\n            instantiateMsg,\n            result,\n            contractAddressAttr,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : {};\n                instantiateMsg = {\n                  type: \"wasm/MsgInstantiateContract\",\n                  value: {\n                    sender: this.signerAddress,\n                    code_id: new math_1.Uint53(codeId).toString(),\n                    label: label,\n                    init_msg: msg,\n                    init_funds: options.transferAmount || [],\n                    admin: options.admin\n                  }\n                };\n                _context4.next = 4;\n                return this.signAndBroadcast([instantiateMsg], this.fees.init, options.memo);\n\n              case 4:\n                result = _context4.sent;\n\n                if (!launchpad_1.isBroadcastTxFailure(result)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 7:\n                contractAddressAttr = launchpad_1.logs.findAttribute(result.logs, \"message\", \"contract_address\");\n                return _context4.abrupt(\"return\", {\n                  contractAddress: contractAddressAttr.value,\n                  logs: result.logs,\n                  transactionHash: result.transactionHash\n                });\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function instantiate(_x4, _x5, _x6) {\n        return _instantiate.apply(this, arguments);\n      }\n\n      return instantiate;\n    }()\n  }, {\n    key: \"updateAdmin\",\n    value: function () {\n      var _updateAdmin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(contractAddress, newAdmin) {\n        var memo,\n            updateAdminMsg,\n            result,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                memo = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : \"\";\n                updateAdminMsg = {\n                  type: \"wasm/MsgUpdateAdmin\",\n                  value: {\n                    sender: this.signerAddress,\n                    contract: contractAddress,\n                    new_admin: newAdmin\n                  }\n                };\n                _context5.next = 4;\n                return this.signAndBroadcast([updateAdminMsg], this.fees.changeAdmin, memo);\n\n              case 4:\n                result = _context5.sent;\n\n                if (!launchpad_1.isBroadcastTxFailure(result)) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 7:\n                return _context5.abrupt(\"return\", {\n                  logs: result.logs,\n                  transactionHash: result.transactionHash\n                });\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function updateAdmin(_x7, _x8) {\n        return _updateAdmin.apply(this, arguments);\n      }\n\n      return updateAdmin;\n    }()\n  }, {\n    key: \"clearAdmin\",\n    value: function () {\n      var _clearAdmin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(contractAddress) {\n        var memo,\n            clearAdminMsg,\n            result,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                memo = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : \"\";\n                clearAdminMsg = {\n                  type: \"wasm/MsgClearAdmin\",\n                  value: {\n                    sender: this.signerAddress,\n                    contract: contractAddress\n                  }\n                };\n                _context6.next = 4;\n                return this.signAndBroadcast([clearAdminMsg], this.fees.changeAdmin, memo);\n\n              case 4:\n                result = _context6.sent;\n\n                if (!launchpad_1.isBroadcastTxFailure(result)) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 7:\n                return _context6.abrupt(\"return\", {\n                  logs: result.logs,\n                  transactionHash: result.transactionHash\n                });\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function clearAdmin(_x9) {\n        return _clearAdmin.apply(this, arguments);\n      }\n\n      return clearAdmin;\n    }()\n  }, {\n    key: \"migrate\",\n    value: function () {\n      var _migrate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(contractAddress, codeId, migrateMsg) {\n        var memo,\n            msg,\n            result,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                memo = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : \"\";\n                msg = {\n                  type: \"wasm/MsgMigrateContract\",\n                  value: {\n                    sender: this.signerAddress,\n                    contract: contractAddress,\n                    code_id: new math_1.Uint53(codeId).toString(),\n                    msg: migrateMsg\n                  }\n                };\n                _context7.next = 4;\n                return this.signAndBroadcast([msg], this.fees.migrate, memo);\n\n              case 4:\n                result = _context7.sent;\n\n                if (!launchpad_1.isBroadcastTxFailure(result)) {\n                  _context7.next = 7;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 7:\n                return _context7.abrupt(\"return\", {\n                  logs: result.logs,\n                  transactionHash: result.transactionHash\n                });\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function migrate(_x10, _x11, _x12) {\n        return _migrate.apply(this, arguments);\n      }\n\n      return migrate;\n    }()\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(contractAddress, msg) {\n        var memo,\n            funds,\n            executeMsg,\n            result,\n            _args8 = arguments;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                memo = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : \"\";\n                funds = _args8.length > 3 ? _args8[3] : undefined;\n                executeMsg = {\n                  type: \"wasm/MsgExecuteContract\",\n                  value: {\n                    sender: this.signerAddress,\n                    contract: contractAddress,\n                    msg: msg,\n                    sent_funds: funds || []\n                  }\n                };\n                _context8.next = 5;\n                return this.signAndBroadcast([executeMsg], this.fees.exec, memo);\n\n              case 5:\n                result = _context8.sent;\n\n                if (!launchpad_1.isBroadcastTxFailure(result)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                throw new Error(createBroadcastTxErrorMessage(result));\n\n              case 8:\n                return _context8.abrupt(\"return\", {\n                  logs: result.logs,\n                  transactionHash: result.transactionHash\n                });\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function execute(_x13, _x14) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"sendTokens\",\n    value: function () {\n      var _sendTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(recipientAddress, amount) {\n        var memo,\n            sendMsg,\n            _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                memo = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : \"\";\n                sendMsg = {\n                  type: \"cosmos-sdk/MsgSend\",\n                  value: {\n                    from_address: this.signerAddress,\n                    to_address: recipientAddress,\n                    amount: amount\n                  }\n                };\n                return _context9.abrupt(\"return\", this.signAndBroadcast([sendMsg], this.fees.send, memo));\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function sendTokens(_x15, _x16) {\n        return _sendTokens.apply(this, arguments);\n      }\n\n      return sendTokens;\n    }()\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature, assembles the signed transaction and broadcasts it.\n     */\n\n  }, {\n    key: \"signAndBroadcast\",\n    value: function () {\n      var _signAndBroadcast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(msgs, fee) {\n        var memo,\n            _yield$this$getSequen,\n            accountNumber,\n            sequence,\n            chainId,\n            signDoc,\n            _yield$this$signer$si,\n            signed,\n            signature,\n            signedTx,\n            _args10 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                memo = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : \"\";\n                _context10.next = 3;\n                return this.getSequence();\n\n              case 3:\n                _yield$this$getSequen = _context10.sent;\n                accountNumber = _yield$this$getSequen.accountNumber;\n                sequence = _yield$this$getSequen.sequence;\n                _context10.next = 8;\n                return this.getChainId();\n\n              case 8:\n                chainId = _context10.sent;\n                signDoc = launchpad_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n                _context10.next = 12;\n                return this.signer.signAmino(this.signerAddress, signDoc);\n\n              case 12:\n                _yield$this$signer$si = _context10.sent;\n                signed = _yield$this$signer$si.signed;\n                signature = _yield$this$signer$si.signature;\n                signedTx = launchpad_1.makeStdTx(signed, signature);\n                return _context10.abrupt(\"return\", this.broadcastTx(signedTx));\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function signAndBroadcast(_x17, _x18) {\n        return _signAndBroadcast.apply(this, arguments);\n      }\n\n      return signAndBroadcast;\n    }()\n  }]);\n\n  return SigningCosmWasmClient;\n}(cosmwasmclient_1.CosmWasmClient);\n\nexports.SigningCosmWasmClient = SigningCosmWasmClient;","map":null,"metadata":{},"sourceType":"script"}