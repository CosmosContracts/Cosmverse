{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar long_1 = __importDefault(require(\"long\"));\n\nvar signing_1 = require(\"./codec/cosmos/tx/signing/v1beta1/signing\");\n\nvar tx_1 = require(\"./codec/cosmos/tx/v1beta1/tx\");\n/**\n * Creates and serializes an AuthInfo document using SIGN_MODE_DIRECT.\n */\n\n\nfunction makeAuthInfoBytes(pubkeys, feeAmount, gasLimit, sequence) {\n  var signMode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : signing_1.SignMode.SIGN_MODE_DIRECT;\n  var authInfo = {\n    signerInfos: pubkeys.map(function (pubkey) {\n      return {\n        publicKey: pubkey,\n        modeInfo: {\n          single: {\n            mode: signMode\n          }\n        },\n        sequence: long_1.default.fromNumber(sequence)\n      };\n    }),\n    fee: {\n      amount: _toConsumableArray(feeAmount),\n      gasLimit: long_1.default.fromNumber(gasLimit)\n    }\n  };\n  return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\n\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\n\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\n\nexports.makeSignDoc = makeSignDoc;\n\nfunction makeSignBytes(_ref) {\n  var accountNumber = _ref.accountNumber,\n      authInfoBytes = _ref.authInfoBytes,\n      bodyBytes = _ref.bodyBytes,\n      chainId = _ref.chainId;\n  var signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\n\nexports.makeSignBytes = makeSignBytes;","map":null,"metadata":{},"sourceType":"script"}