{"ast":null,"code":"var _jsxFileName = \"/Users/pauloponciano/Documents/cosmverse/src/App/oldFrontend/pages/account/token.tsx\",\n    _s3 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Link as ReactRouterLink, useParams } from \"react-router-dom\";\nimport { Avatar, Box, Button, Center, chakra, Flex, HStack, Image, Link, Spinner, VStack, useColorModeValue, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, FormControl, FormLabel, ModalFooter, Select, NumberInput, NumberInputField, SimpleGrid, GridItem, useDisclosure, useToast, useBoolean, Grid } from \"@chakra-ui/react\";\nimport { CW721, publicIpfsUrl, formatAddress, formatPrice, Market, toMinDenom, useSdk } from \"../../services\";\nimport { TransactionLink } from \"../../components\";\nimport { coins, config } from \"../../../config\";\nimport userLogo from \"../../assets/user-default.svg\";\nimport cosmverseLogo from \"../../assets/cosmverse.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AccountToken = () => {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const {\n    id\n  } = useParams();\n  const {\n    client,\n    address,\n    getSignClient\n  } = useSdk();\n  const [nft, setNft] = useState();\n  const [owner, setOwner] = useState();\n  const [offer, setOffer] = useState();\n  const [loading, setLoading] = useBoolean();\n  const toast = useToast();\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const [amount, setAmount] = useState();\n  const [denom, setDenom] = useState();\n  const loadData = useCallback(async () => {\n    if (!client) return;\n    const contract = CW721(config.contract).use(client);\n    const marketContract = Market(config.marketContract).use(client);\n    const result = await contract.nftInfo(id);\n    result.image = publicIpfsUrl(result.image);\n    const offer = await marketContract.offer(config.contract, id);\n    setOffer(offer);\n    setOwner(offer ? offer.seller : await contract.ownerOf(id));\n    setNft(result);\n  }, [client, id]);\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  const handleSell = async () => {\n    _s();\n\n    const signClient = getSignClient();\n\n    if (!signClient) {\n      toast({\n        title: \"Account required.\",\n        description: \"Please, connect wallet.\",\n        status: \"warning\",\n        position: \"top\",\n        isClosable: true\n      });\n      return;\n    }\n\n    if (!amount || !denom) return;\n    onClose();\n    setLoading.on();\n\n    try {\n      const contract = CW721(config.contract).useTx(signClient);\n      const price = {\n        list_price: {\n          amount: toMinDenom(amount, denom),\n          denom\n        }\n      };\n      const txHash = await contract.send(address, config.marketContract, price, id);\n      toast({\n        title: `Successful Transaction`,\n        description: /*#__PURE__*/_jsxDEV(TransactionLink, {\n          tx: txHash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this),\n        status: \"success\",\n        position: \"bottom-right\",\n        isClosable: true\n      });\n      await loadData();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `${error}`,\n        status: \"error\",\n        position: \"bottom-right\",\n        isClosable: true\n      });\n    } finally {\n      setLoading.off();\n    }\n  };\n\n  _s(handleSell, \"880Og+6fzB4pzVzRY1a/BkMlQU0=\", true);\n\n  const handleWithdraw = async () => {\n    _s2();\n\n    const signClient = getSignClient();\n\n    if (!signClient) {\n      toast({\n        title: \"Account required.\",\n        description: \"Please, connect wallet.\",\n        status: \"warning\",\n        position: \"top\",\n        isClosable: true\n      });\n      return;\n    }\n\n    if (!offer) return;\n    setLoading.on();\n\n    try {\n      const contract = Market(config.marketContract).useTx(signClient);\n      const txHash = await contract.withdraw(address, offer.id);\n      toast({\n        title: `Successful Transaction`,\n        description: /*#__PURE__*/_jsxDEV(TransactionLink, {\n          tx: txHash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this),\n        status: \"success\",\n        position: \"bottom-right\",\n        isClosable: true\n      });\n      await loadData();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `${error}`,\n        status: \"error\",\n        position: \"bottom-right\",\n        isClosable: true\n      });\n    } finally {\n      setLoading.off();\n    }\n  };\n\n  _s2(handleWithdraw, \"880Og+6fzB4pzVzRY1a/BkMlQU0=\", true);\n\n  const loadingSkeleton = /*#__PURE__*/_jsxDEV(Center, {\n    children: /*#__PURE__*/_jsxDEV(Spinner, {\n      size: \"xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 7\n  }, this);\n\n  const borderColor = useColorModeValue('cyan.900', 'white.200');\n\n  const priceModal = /*#__PURE__*/_jsxDEV(Modal, {\n    closeOnOverlayClick: false,\n    isOpen: isOpen,\n    onClose: onClose,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Create sell order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        pb: 6,\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          fontFamily: \"mono\",\n          fontWeight: \"semibold\",\n          children: \"Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n          columns: 6,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            as: GridItem,\n            colSpan: [6, 4],\n            children: /*#__PURE__*/_jsxDEV(NumberInput, {\n              onChange: (_, value) => setAmount(value),\n              children: /*#__PURE__*/_jsxDEV(NumberInputField, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            as: GridItem,\n            colSpan: [6, 2],\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select coin\",\n              onChange: e => setDenom(e.target.value),\n              children: coins.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: c.denom,\n                children: c.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSell,\n          colorScheme: \"pink\",\n          mr: 3,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 7\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    m: 5,\n    children: [!nft ? loadingSkeleton : /*#__PURE__*/_jsxDEV(Grid, {\n      minH: \"80vh\",\n      gridTemplateColumns: {\n        sm: \"repeat(1, minmax(0px, 1fr))\",\n        md: \"repeat(8, minmax(0px, 1fr))\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 5,\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          h: \"full\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            bgGradient: \"linear(to-r, cyan.200, white.200)\",\n            roundedTop: \"md\",\n            boxSize: \"420px\",\n            fit: \"cover\",\n            fallbackSrc: cosmverseLogo,\n            src: nft.image,\n            alt: nft.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 3,\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          h: \"80vh\",\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: 6,\n            align: \"stretch\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              py: 2,\n              children: [/*#__PURE__*/_jsxDEV(chakra.h1, {\n                fontWeight: \"bold\",\n                fontSize: \"3xl\",\n                children: nft.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(chakra.p, {\n                mt: 1,\n                fontSize: \"xs\",\n                color: \"cyan.500\",\n                children: \"@unknown\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(chakra.p, {\n                mt: 1,\n                maxW: \"400px\",\n                fontSize: \"md\",\n                children: nft.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(VStack, {\n                spacing: 2,\n                align: \"stretch\",\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(chakra.p, {\n                    fontFamily: \"mono\",\n                    fontSize: \"md\",\n                    color: \"gray.500\",\n                    children: \"Owner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(HStack, {\n                    children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                      size: \"sm\",\n                      name: \"Juno\",\n                      src: userLogo\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 283,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Link, {\n                      fontSize: \"md\",\n                      fontWeight: \"semibold\",\n                      _hover: {\n                        color: \"gray.600\"\n                      },\n                      as: ReactRouterLink,\n                      to: `/account/${owner}`,\n                      children: formatAddress(owner)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 284,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(VStack, {\n                spacing: 2,\n                align: \"stretch\",\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(chakra.p, {\n                    fontFamily: \"mono\",\n                    fontSize: \"md\",\n                    color: \"gray.500\",\n                    children: \"Price\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(chakra.p, {\n                    fontWeight: \"semibold\",\n                    fontSize: \"md\",\n                    children: offer ? formatPrice(offer.list_price) : \"Not listed\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              py: 6,\n              borderTop: 1,\n              borderStyle: 'solid',\n              borderColor: borderColor,\n              children: offer ? /*#__PURE__*/_jsxDEV(Button, {\n                isLoading: loading,\n                onClick: handleWithdraw,\n                title: \"Withdraw NFT\",\n                type: \"button\",\n                height: \"var(--chakra-sizes-10)\",\n                fontSize: 'md',\n                fontWeight: \"semibold\",\n                borderRadius: '50px',\n                color: 'white',\n                bg: \"pink.500\",\n                _hover: {\n                  bg: \"pink.700\"\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                isLoading: loading,\n                onClick: onOpen,\n                type: \"button\",\n                height: \"var(--chakra-sizes-10)\",\n                fontSize: 'md',\n                fontWeight: \"semibold\",\n                borderRadius: '50px',\n                color: 'white',\n                bg: \"pink.500\",\n                _hover: {\n                  bg: \"pink.700\"\n                },\n                children: \"Sell\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 11\n    }, this), priceModal]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 7\n  }, this);\n};\n\n_s3(AccountToken, \"vnQynD7mkG8YY3Vxlu1erRTn9V8=\", false, function () {\n  return [useParams, useSdk, useBoolean, useToast, useDisclosure, useColorModeValue];\n});\n\n_c = AccountToken;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountToken\");","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/oldFrontend/pages/account/token.tsx"],"names":["React","useCallback","useEffect","useState","Link","ReactRouterLink","useParams","Avatar","Box","Button","Center","chakra","Flex","HStack","Image","Spinner","VStack","useColorModeValue","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","FormControl","FormLabel","ModalFooter","Select","NumberInput","NumberInputField","SimpleGrid","GridItem","useDisclosure","useToast","useBoolean","Grid","CW721","publicIpfsUrl","formatAddress","formatPrice","Market","toMinDenom","useSdk","TransactionLink","coins","config","cosmverseLogo","AccountToken","id","client","address","getSignClient","nft","setNft","owner","setOwner","offer","setOffer","loading","setLoading","toast","isOpen","onOpen","onClose","amount","setAmount","denom","setDenom","loadData","contract","use","marketContract","result","nftInfo","image","seller","ownerOf","handleSell","signClient","title","description","status","position","isClosable","on","useTx","price","list_price","txHash","send","error","off","handleWithdraw","withdraw","loadingSkeleton","borderColor","priceModal","_","value","e","target","map","c","name","sm","md","userLogo","color","bg"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Link as ReactRouterLink, useParams } from \"react-router-dom\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Center,\n  chakra,\n  Flex,\n  HStack,\n  Image,\n  Link,\n  Spinner,\n  VStack,\n  useColorModeValue,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  FormControl,\n  FormLabel,\n  ModalFooter,\n  Select,\n  NumberInput,\n  NumberInputField,\n  SimpleGrid,\n  GridItem,\n  useDisclosure,\n  useToast,\n  useBoolean,\n  Grid,\n} from \"@chakra-ui/react\";\nimport {\n  CW721,\n  NftInfoResponse,\n  publicIpfsUrl,\n  formatAddress,\n  formatPrice,\n  Market,\n  OfferResponse,\n  toMinDenom,\n  useSdk,\n} from \"../../services\";\nimport { TransactionLink } from \"../../components\";\nimport { coins, config } from \"../../../config\";\nimport userLogo from \"../../assets/user-default.svg\";\nimport cosmverseLogo from \"../../assets/cosmverse.jpg\";\n\ninterface DetailParams {\n    readonly id: string;\n}\n\nexport const AccountToken = () => {\n    const { id } = useParams<DetailParams>();\n    const { client, address, getSignClient } = useSdk();\n    const [nft, setNft] = useState<NftInfoResponse>();\n    const [owner, setOwner] = useState<string>();\n    const [offer, setOffer] = useState<OfferResponse>();\n    const [loading, setLoading] = useBoolean();\n\n    const toast = useToast();\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const [amount, setAmount] = useState<number>();\n    const [denom, setDenom] = useState<string>();\n\n    const loadData = useCallback(async () => {\n      if (!client) return;\n\n      const contract = CW721(config.contract).use(client);\n      const marketContract = Market(config.marketContract).use(client);\n\n      const result = await contract.nftInfo(id);\n      result.image = publicIpfsUrl(result.image);\n      const offer = await marketContract.offer(config.contract, id);\n\n      setOffer(offer);\n      setOwner(offer ? offer.seller : (await contract.ownerOf(id)));\n      setNft(result);\n    }, [client, id]);\n\n    useEffect(() => {\n      loadData();\n    }, [loadData]);\n\n    const handleSell = async () => {\n      const signClient = getSignClient();\n      if (!signClient) {\n        toast({\n          title: \"Account required.\",\n          description: \"Please, connect wallet.\",\n          status: \"warning\",\n          position: \"top\",\n          isClosable: true,\n        });\n\n        return;\n      }\n\n      if (!amount || !denom) return;\n      onClose();\n      setLoading.on();\n\n      try {\n        const contract = CW721(config.contract).useTx(signClient);\n        const price = { list_price: {amount: toMinDenom(amount, denom), denom}};\n        const txHash = await contract.send(address, config.marketContract, price, id);\n\n        toast({\n          title: `Successful Transaction`,\n          description: (<TransactionLink tx={txHash} />),\n          status: \"success\",\n          position: \"bottom-right\",\n          isClosable: true,\n        });\n        await loadData();\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: `${error}`,\n          status: \"error\",\n          position: \"bottom-right\",\n          isClosable: true,\n        });\n      }\n      finally {\n        setLoading.off();\n      }\n    };\n\n    const handleWithdraw = async () => {\n      const signClient = getSignClient();\n      if (!signClient) {\n        toast({\n          title: \"Account required.\",\n          description: \"Please, connect wallet.\",\n          status: \"warning\",\n          position: \"top\",\n          isClosable: true,\n        });\n\n        return;\n      }\n\n      if (!offer) return;\n      setLoading.on();\n\n      try {\n        const contract = Market(config.marketContract).useTx(signClient);\n        const txHash = await contract.withdraw(address, offer.id);\n\n        toast({\n          title: `Successful Transaction`,\n          description: (<TransactionLink tx={txHash} />),\n          status: \"success\",\n          position: \"bottom-right\",\n          isClosable: true,\n        });\n        await loadData();\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: `${error}`,\n          status: \"error\",\n          position: \"bottom-right\",\n          isClosable: true,\n        });\n      }\n      finally {\n        setLoading.off();\n      }\n    };\n\n    const loadingSkeleton = (\n      <Center>\n        <Spinner size=\"xl\" />\n      </Center>\n    );\n\n    const borderColor = useColorModeValue('cyan.900', 'white.200');\n    const priceModal = (\n      <Modal\n        closeOnOverlayClick={false}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create sell order</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <FormLabel fontFamily=\"mono\" fontWeight=\"semibold\">Price</FormLabel>\n            <SimpleGrid columns={6} spacing={3}>\n            <FormControl as={GridItem} colSpan={[6, 4]}>\n              <NumberInput\n                onChange={(_, value) => setAmount(value)}>\n                <NumberInputField />\n              </NumberInput>\n            </FormControl>\n            <FormControl as={GridItem} colSpan={[6, 2]}>\n              <Select placeholder=\"Select coin\" onChange={e => setDenom(e.target.value)}>\n                {coins.map(c => <option value={c.denom}>{c.name}</option>)}\n              </Select>\n            </FormControl>\n            </SimpleGrid>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button onClick={handleSell} colorScheme=\"pink\" mr={3}>\n              Confirm\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    );\n    return (\n      <Box m={5}>\n        {!nft ? loadingSkeleton : (\n          <Grid minH=\"80vh\"\n            gridTemplateColumns={{\n              sm: \"repeat(1, minmax(0px, 1fr))\",\n              md: \"repeat(8, minmax(0px, 1fr))\"\n            }}>\n            <GridItem colSpan={5}>\n              <Flex\n                h=\"full\"\n                justifyContent=\"center\"\n                alignItems=\"center\">\n                <Image\n                  bgGradient=\"linear(to-r, cyan.200, white.200)\"\n                  roundedTop=\"md\"\n                  boxSize=\"420px\"\n                  fit=\"cover\"\n                  fallbackSrc={cosmverseLogo}\n                  src={nft.image}\n                  alt={nft.name} />\n              </Flex>\n            </GridItem>\n            <GridItem colSpan={3}>\n              <Flex h=\"80vh\">\n                <VStack spacing={6} align=\"stretch\">\n                  <Box py={2}>\n                    <chakra.h1\n                      fontWeight=\"bold\"\n                      fontSize=\"3xl\"\n                    >\n                      {nft.name}\n                    </chakra.h1>\n                    <chakra.p\n                      mt={1}\n                      fontSize=\"xs\"\n                      color=\"cyan.500\"\n                    >\n                      @unknown\n                    </chakra.p>\n                    <chakra.p\n                      mt={1}\n                      maxW=\"400px\"\n                      fontSize=\"md\"\n                    >\n                      {nft.description}\n                    </chakra.p>\n                  </Box>\n                  <Box>\n                    <VStack spacing={2} align=\"stretch\">\n                      <Box>\n                        <chakra.p\n                          fontFamily=\"mono\"\n                          fontSize=\"md\"\n                          color=\"gray.500\"\n                        >\n                          Owner\n                        </chakra.p>\n                      </Box>\n                      <Box>\n                        <HStack>\n                          <Avatar size=\"sm\" name=\"Juno\" src={userLogo} />\n                          <Link\n                            fontSize=\"md\"\n                            fontWeight=\"semibold\"\n                            _hover={{\n                              color: \"gray.600\",\n                            }}\n                            as={ReactRouterLink}\n                            to={`/account/${owner}`}>{formatAddress(owner!)}</Link>\n                        </HStack>\n                      </Box>\n                    </VStack>\n                  </Box>\n                  <Box>\n                    <VStack spacing={2} align=\"stretch\">\n                      <Box>\n                        <chakra.p\n                          fontFamily=\"mono\"\n                          fontSize=\"md\"\n                          color=\"gray.500\"\n                        >\n                          Price\n                        </chakra.p>\n                      </Box>\n                      <Box>\n                        <chakra.p\n                          fontWeight=\"semibold\"\n                          fontSize=\"md\"\n                        >\n                          {offer ? formatPrice(offer.list_price) : \"Not listed\"}\n                        </chakra.p>\n                      </Box>\n                    </VStack>\n                  </Box>\n                  <Box py={6}\n                    borderTop={1}\n                    borderStyle={'solid'}\n                    borderColor={borderColor}>\n                    {offer ? (\n                      <Button\n                        isLoading={loading}\n                        onClick={handleWithdraw}\n                        title=\"Withdraw NFT\"\n                        type=\"button\"\n                        height=\"var(--chakra-sizes-10)\"\n                        fontSize={'md'}\n                        fontWeight=\"semibold\"\n                        borderRadius={'50px'}\n                        color={'white'}\n                        bg=\"pink.500\"\n                        _hover={{\n                          bg: \"pink.700\",\n                        }}>\n                        Cancel\n                      </Button>\n                    ) : (\n                      <Button\n                        isLoading={loading}\n                        onClick={onOpen}\n                        type=\"button\"\n                        height=\"var(--chakra-sizes-10)\"\n                        fontSize={'md'}\n                        fontWeight=\"semibold\"\n                        borderRadius={'50px'}\n                        color={'white'}\n                        bg=\"pink.500\"\n                        _hover={{\n                          bg: \"pink.700\",\n                        }}>\n                        Sell\n                      </Button>\n                    )}\n                  </Box>\n                </VStack>\n              </Flex>\n            </GridItem>\n          </Grid>\n      )}\n      {priceModal}\n      </Box>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}