{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/pauloponciano/Documents/cosmverse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupWasmExtension = void 0;\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar stargate_1 = require(\"@cosmjs/stargate\");\n\nvar long_1 = __importDefault(require(\"long\"));\n\nvar query_1 = require(\"../codec/cosmwasm/wasm/v1beta1/query\");\n\nfunction setupWasmExtension(base) {\n  var rpc = stargate_1.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  var queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    wasm: {\n      listCodeInfo: function () {\n        var _listCodeInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(paginationKey) {\n          var request;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  request = {\n                    pagination: stargate_1.createPagination(paginationKey)\n                  };\n                  return _context.abrupt(\"return\", queryService.Codes(request));\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function listCodeInfo(_x) {\n          return _listCodeInfo.apply(this, arguments);\n        }\n\n        return listCodeInfo;\n      }(),\n      getCode: function () {\n        var _getCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n          var request;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  request = {\n                    codeId: long_1.default.fromNumber(id)\n                  };\n                  return _context2.abrupt(\"return\", queryService.Code(request));\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function getCode(_x2) {\n          return _getCode.apply(this, arguments);\n        }\n\n        return getCode;\n      }(),\n      listContractsByCodeId: function () {\n        var _listContractsByCodeId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id, paginationKey) {\n          var pagination, request;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  pagination = {\n                    pagination: stargate_1.createPagination(paginationKey)\n                  };\n                  request = Object.assign(Object.assign({}, pagination), {\n                    codeId: long_1.default.fromNumber(id)\n                  });\n                  return _context3.abrupt(\"return\", queryService.ContractsByCode(request));\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        function listContractsByCodeId(_x3, _x4) {\n          return _listContractsByCodeId.apply(this, arguments);\n        }\n\n        return listContractsByCodeId;\n      }(),\n      getContractInfo: function () {\n        var _getContractInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(address) {\n          var request;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  request = {\n                    address: address\n                  };\n                  return _context4.abrupt(\"return\", queryService.ContractInfo(request));\n\n                case 2:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        function getContractInfo(_x5) {\n          return _getContractInfo.apply(this, arguments);\n        }\n\n        return getContractInfo;\n      }(),\n      getContractCodeHistory: function () {\n        var _getContractCodeHistory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(address, paginationKey) {\n          var pagination, request;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  pagination = {\n                    pagination: stargate_1.createPagination(paginationKey)\n                  };\n                  request = Object.assign(Object.assign({}, pagination), {\n                    address: address\n                  });\n                  return _context5.abrupt(\"return\", queryService.ContractHistory(request));\n\n                case 3:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        function getContractCodeHistory(_x6, _x7) {\n          return _getContractCodeHistory.apply(this, arguments);\n        }\n\n        return getContractCodeHistory;\n      }(),\n      getAllContractState: function () {\n        var _getAllContractState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(address, paginationKey) {\n          var pagination, request;\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  pagination = {\n                    pagination: stargate_1.createPagination(paginationKey)\n                  };\n                  request = Object.assign(Object.assign({}, pagination), {\n                    address: address\n                  });\n                  return _context6.abrupt(\"return\", queryService.AllContractState(request));\n\n                case 3:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n\n        function getAllContractState(_x8, _x9) {\n          return _getAllContractState.apply(this, arguments);\n        }\n\n        return getAllContractState;\n      }(),\n      queryContractRaw: function () {\n        var _queryContractRaw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(address, key) {\n          var request;\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  request = {\n                    address: address,\n                    queryData: key\n                  };\n                  return _context7.abrupt(\"return\", queryService.RawContractState(request));\n\n                case 2:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        function queryContractRaw(_x10, _x11) {\n          return _queryContractRaw.apply(this, arguments);\n        }\n\n        return queryContractRaw;\n      }(),\n      queryContractSmart: function () {\n        var _queryContractSmart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(address, query) {\n          var request, _yield$queryService$S, data;\n\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  request = {\n                    address: address,\n                    queryData: encoding_1.toAscii(JSON.stringify(query))\n                  };\n                  _context8.next = 3;\n                  return queryService.SmartContractState(request);\n\n                case 3:\n                  _yield$queryService$S = _context8.sent;\n                  data = _yield$queryService$S.data;\n                  _context8.prev = 5;\n                  return _context8.abrupt(\"return\", JSON.parse(encoding_1.fromUtf8(data)));\n\n                case 9:\n                  _context8.prev = 9;\n                  _context8.t0 = _context8[\"catch\"](5);\n                  throw new Error(\"Contract did not return valid JSON data\");\n\n                case 12:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8, null, [[5, 9]]);\n        }));\n\n        function queryContractSmart(_x12, _x13) {\n          return _queryContractSmart.apply(this, arguments);\n        }\n\n        return queryContractSmart;\n      }()\n    }\n  };\n}\n\nexports.setupWasmExtension = setupWasmExtension;","map":null,"metadata":{},"sourceType":"script"}