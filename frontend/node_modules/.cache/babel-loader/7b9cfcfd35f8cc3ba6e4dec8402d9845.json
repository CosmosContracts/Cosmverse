{"ast":null,"code":"var _jsxFileName = \"/Users/pauloponciano/Documents/cosmverse/src/App/oldFrontend/pages/create/index.tsx\",\n    _s2 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { Bech32, toHex } from \"@cosmjs/encoding\";\nimport { Box, Button, Flex, FormControl, FormLabel, Heading, Input, Textarea, useBoolean, useToast } from \"@chakra-ui/react\";\nimport { CW721, unSanitizeIpfsUrl, uploadFile, useSdk } from \"../../../services\";\nimport { FileUpload, TransactionLink } from \"../../../components\";\nimport { config } from \"../../../../config\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction generateId(address) {\n  // TODO: Format ID?\n  const pubkey = toHex(Bech32.decode(address).data);\n  return ((pubkey === null || pubkey === void 0 ? void 0 : pubkey.substr(2, 10)) + (pubkey === null || pubkey === void 0 ? void 0 : pubkey.substring(pubkey.length - 8)) + '-' + Math.random().toString(36).substr(2, 9)).toUpperCase();\n}\n\nexport const Create = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const toast = useToast();\n  const history = useHistory();\n  const {\n    getSignClient,\n    address\n  } = useSdk();\n  const [files, setFiles] = useState();\n  const [nftName, setNftName] = useState();\n  const [description, setDescription] = useState();\n  const [loading, setLoading] = useBoolean();\n\n  async function createNft(e) {\n    _s();\n\n    // TODO: use formik validations\n    e.preventDefault();\n\n    if (!address) {\n      toast({\n        title: \"Account required.\",\n        description: \"Please connect wallet.\",\n        status: \"warning\",\n        position: \"top\",\n        isClosable: true\n      });\n      return;\n    }\n\n    if (!files || files.length === 0) {\n      return;\n    }\n\n    setLoading.on(); // TODO: Load on init page and show after load page\n\n    const nftId = generateId(address);\n\n    try {\n      const fileHash = await uploadFile(files[0]);\n      console.log(fileHash, nftId);\n      const nftMsg = {\n        token_id: nftId,\n        owner: address,\n        name: nftName,\n        description: description,\n        image: unSanitizeIpfsUrl(fileHash)\n      };\n      const contract = CW721(config.contract).useTx(getSignClient());\n      const txHash = await contract.mint(address, nftMsg);\n      toast({\n        title: `Successful Transaction`,\n        description: /*#__PURE__*/_jsxDEV(TransactionLink, {\n          tx: txHash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 23\n        }, this),\n        status: \"success\",\n        position: \"bottom-right\",\n        isClosable: true\n      });\n      setLoading.off();\n      history.push(`/account/token/${nftId}`);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `${error}`,\n        status: \"error\",\n        position: \"bottom-right\",\n        isClosable: true\n      });\n      setLoading.off();\n    }\n  }\n\n  _s(createNft, \"880Og+6fzB4pzVzRY1a/BkMlQU0=\", true);\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    p: 4,\n    mb: 8,\n    justifyContent: \"center\",\n    direction: \"row\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      maxW: \"500px\",\n      w: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          mt: 6,\n          mb: 10,\n          children: /*#__PURE__*/_jsxDEV(Heading, {\n            as: \"h3\",\n            fontSize: \"3xl\",\n            children: \"Create a single NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          as: 'form',\n          id: \"nft-form\",\n          onSubmit: createNft,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"name\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                fontSize: \"sm\",\n                fontFamily: \"mono\",\n                fontWeight: \"semibold\",\n                children: \"Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n                accept: \"image/*\",\n                onDrop: acceptedFiles => setFiles(acceptedFiles)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"name\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                fontSize: \"sm\",\n                fontFamily: \"mono\",\n                fontWeight: \"semibold\",\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                name: \"name\",\n                spellCheck: false,\n                onChange: e => setNftName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"description\",\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                fontSize: \"sm\",\n                fontFamily: \"mono\",\n                fontWeight: \"semibold\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n                name: \"description\",\n                placeholder: \"NFT description\",\n                spellCheck: false,\n                onChange: e => setDescription(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 6,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              isLoading: loading,\n              loadingText: \"Minting\",\n              type: \"submit\",\n              height: \"var(--chakra-sizes-10)\",\n              fontSize: 'md',\n              fontWeight: \"semibold\",\n              borderRadius: '50px',\n              color: 'white',\n              bg: \"pink.500\",\n              _hover: {\n                bg: \"gray.500\"\n              },\n              children: \"Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Create, \"u3oUBex6zXUdKi07uaTsibc+b3I=\", false, function () {\n  return [useToast, useHistory, useSdk, useBoolean];\n});\n\n_c = Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/Users/pauloponciano/Documents/cosmverse/src/App/oldFrontend/pages/create/index.tsx"],"names":["React","Bech32","toHex","Box","Button","Flex","FormControl","FormLabel","Heading","Input","Textarea","useBoolean","useToast","CW721","unSanitizeIpfsUrl","uploadFile","useSdk","FileUpload","TransactionLink","config","useHistory","useState","generateId","address","pubkey","decode","data","substr","substring","length","Math","random","toString","toUpperCase","Create","toast","history","getSignClient","files","setFiles","nftName","setNftName","description","setDescription","loading","setLoading","createNft","e","preventDefault","title","status","position","isClosable","on","nftId","fileHash","console","log","nftMsg","token_id","owner","name","image","contract","useTx","txHash","mint","off","push","error","acceptedFiles","target","value","bg"],"mappings":"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","sourcesContent":["import * as React from \"react\";\n\nimport { Bech32, toHex } from \"@cosmjs/encoding\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Textarea,\n  useBoolean,\n  useToast,\n} from \"@chakra-ui/react\";\nimport {\n  CW721,\n  unSanitizeIpfsUrl,\n  uploadFile,\n  useSdk,\n} from \"../../../services\";\nimport { FileUpload, TransactionLink } from \"../../../components\"\n\nimport { config } from \"../../../../config\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\n\nfunction generateId(address: string) {\n  // TODO: Format ID?\n  const pubkey = toHex(Bech32.decode(address).data);\n  return (\n    pubkey?.substr(2, 10) +\n    pubkey?.substring(pubkey.length - 8) +\n    '-' +\n    Math.random().toString(36).substr(2, 9)\n  ).toUpperCase();\n}\n\nexport const Create = () => {\n  const toast = useToast();\n  const history = useHistory();\n  const { getSignClient, address } = useSdk();\n  const [files, setFiles] = useState<File[]>();\n  const [nftName, setNftName]= useState<string>();\n  const [description, setDescription]= useState<string>();\n  const [loading, setLoading] = useBoolean();\n\n  async function createNft(e: any) {\n    // TODO: use formik validations\n    e.preventDefault();\n\n    if (!address) {\n      toast({\n        title: \"Account required.\",\n        description: \"Please connect wallet.\",\n        status: \"warning\",\n        position: \"top\",\n        isClosable: true,\n      });\n\n      return;\n    }\n\n    if (!files || files.length === 0) {\n      return;\n    }\n\n    setLoading.on();\n    // TODO: Load on init page and show after load page\n    const nftId = generateId(address);\n\n    try {\n      const fileHash = await uploadFile(files[0]);\n      console.log(fileHash, nftId);\n      const nftMsg = {\n        token_id: nftId,\n        owner: address,\n        name: nftName!,\n        description: description,\n        image: unSanitizeIpfsUrl(fileHash)\n      };\n\n      const contract = CW721(config.contract).useTx(getSignClient()!);\n      const txHash = await contract.mint(address, nftMsg);\n\n      toast({\n        title: `Successful Transaction`,\n        description: (<TransactionLink tx={txHash} />),\n        status: \"success\",\n        position: \"bottom-right\",\n        isClosable: true,\n      });\n\n      setLoading.off();\n      history.push(`/account/token/${nftId}`);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `${error}`,\n        status: \"error\",\n        position: \"bottom-right\",\n        isClosable: true,\n      });\n      setLoading.off();\n    }\n  }\n\n  return (\n  <Flex\n    p={4}\n    mb={8}\n    justifyContent=\"center\"\n    direction=\"row\">\n    <Box maxW=\"500px\" w=\"100%\">\n      <Box>\n        <Box mt={6} mb={10}>\n          <Heading as=\"h3\" fontSize=\"3xl\">Create a single NFT</Heading>\n        </Box>\n        <Box as={'form'} id=\"nft-form\" onSubmit={createNft}>\n        <Box>\n            <FormControl id=\"name\" isRequired>\n              <FormLabel\n                fontSize=\"sm\"\n                fontFamily=\"mono\"\n                fontWeight=\"semibold\"\n              >Image</FormLabel>\n              <FileUpload accept=\"image/*\" onDrop={acceptedFiles => setFiles(acceptedFiles)} />\n            </FormControl>\n          </Box>\n          <Box mt={4}>\n            <FormControl id=\"name\" isRequired>\n              <FormLabel\n                fontSize=\"sm\"\n                fontFamily=\"mono\"\n                fontWeight=\"semibold\"\n              >Name</FormLabel>\n              <Input\n                name=\"name\"\n                spellCheck={false}\n                onChange={e => setNftName(e.target.value)} />\n            </FormControl>\n          </Box>\n          <Box mt={4}>\n            <FormControl id=\"description\">\n              <FormLabel\n                fontSize=\"sm\"\n                fontFamily=\"mono\"\n                fontWeight=\"semibold\"\n              >Description</FormLabel>\n              <Textarea name=\"description\"\n                placeholder=\"NFT description\"\n                spellCheck={false}\n                onChange={e => setDescription(e.target.value)} />\n            </FormControl>\n          </Box>\n          <Box mt={6}>\n            <Button\n              isLoading={loading}\n              loadingText=\"Minting\"\n              type=\"submit\"\n              height=\"var(--chakra-sizes-10)\"\n              fontSize={'md'}\n              fontWeight=\"semibold\"\n              borderRadius={'50px'}\n              color={'white'}\n              bg=\"pink.500\"\n              _hover={{\n                bg: \"gray.500\",\n              }}>\n              Create\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n\n    </Box>\n  </Flex>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}